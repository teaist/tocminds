{"version":3,"file":"es5_extract_plugin.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/extract/source_files/es5_extract_plugin.ts"],"names":[],"mappings":";;AAAA;;;;;;GAMG;AACH,gDAAkE;AAKlE,4DAK8B;AAG9B,SAAgB,oBAAoB,CAClC,QAAkD,EAClD,WAAwB,EACxB,YAAY,GAAG,WAAW;IAE1B,OAAO;QACL,OAAO,EAAE;YACP,cAAc,CAAC,QAAkC;gBAC/C,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC1C,IACE,qCAAiB,CAAC,UAAU,EAAE,YAAY,CAAC;oBAC3C,sCAAkB,CAAC,UAAU,CAAC,EAC9B;oBACA,MAAM,YAAY,GAAG,sDAAkC,CAAC,QAAQ,CAAC,CAAC;oBAClE,MAAM,WAAW,GAAG,uDAAmC,CACrD,QAAQ,CAAC,IAAI,CACd,CAAC;oBACF,MAAM,OAAO,GAAyC,wBAAa,CACjE,YAAY,EACZ,WAAW,CACZ,CAAC;oBACF,IACE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE,CAC1B,OAAO,CAAC,EAAE;wBACR,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE;wBACvB,CAAC,CAAC,GAAG,CAAC,SAAS;4BACF,OAAgC,CAAC,SAAS,CAC1D,EACD;wBACA,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACxB;iBACF;YACH,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAnCD,oDAmCC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ɵParsedMessage, ɵparseMessage } from '@angular/localize';\nimport { NodePath, PluginObj } from '@babel/core';\nimport { CallExpression } from '@babel/types';\nimport { ParsedMessageLegacy } from '../../../cmds/common/util';\n\nimport {\n  isGlobalIdentifier,\n  isNamedIdentifier,\n  unwrapMessagePartsFromLocalizeCall,\n  unwrapSubstitutionsFromLocalizeCall\n} from '../source_file_utils';\nimport { Diagnostics } from '../../common/diagnostics';\n\nexport function makeEs5ExtractPlugin(\n  messages: (ɵParsedMessage | ParsedMessageLegacy)[],\n  diagnostics: Diagnostics,\n  localizeName = '$localize'\n): PluginObj {\n  return {\n    visitor: {\n      CallExpression(callPath: NodePath<CallExpression>) {\n        const calleePath = callPath.get('callee');\n        if (\n          isNamedIdentifier(calleePath, localizeName) &&\n          isGlobalIdentifier(calleePath)\n        ) {\n          const messageParts = unwrapMessagePartsFromLocalizeCall(callPath);\n          const expressions = unwrapSubstitutionsFromLocalizeCall(\n            callPath.node\n          );\n          const message: ɵParsedMessage | ParsedMessageLegacy = ɵparseMessage(\n            messageParts,\n            expressions\n          );\n          if (\n            !messages.find((msg: any) =>\n              message.id\n                ? msg.id === message.id\n                : msg.messageId ===\n                  ((<unknown>message) as ParsedMessageLegacy).messageId\n            )\n          ) {\n            messages.push(message);\n          }\n        }\n      }\n    }\n  };\n}\n"]}