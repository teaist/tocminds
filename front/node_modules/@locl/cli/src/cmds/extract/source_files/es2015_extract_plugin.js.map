{"version":3,"file":"es2015_extract_plugin.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/extract/source_files/es2015_extract_plugin.ts"],"names":[],"mappings":";;AAAA;;;;;;GAMG;AACH,gDAAkE;AAKlE,4DAI8B;AAG9B,SAAgB,uBAAuB,CACrC,QAAkD,EAClD,WAAwB,EACxB,YAAY,GAAG,WAAW;IAE1B,OAAO;QACL,OAAO,EAAE;YACP,wBAAwB,CAAC,IAAwC;gBAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC5B,IAAI,qCAAiB,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,sCAAkB,CAAC,GAAG,CAAC,EAAE;oBACnE,MAAM,YAAY,GAAG,yDAAqC,CACxD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CACvB,CAAC;oBACF,MAAM,OAAO,GAAyC,wBAAa,CACjE,YAAY,EACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAC5B,CAAC;oBACF,IACE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE,CAC1B,OAAO,CAAC,EAAE;wBACR,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE;wBACvB,CAAC,CAAC,GAAG,CAAC,SAAS;4BACF,OAAgC,CAAC,SAAS,CAC1D,EACD;wBACA,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACxB;iBACF;YACH,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AA/BD,0DA+BC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ɵParsedMessage, ɵparseMessage } from '@angular/localize';\r\nimport { NodePath, PluginObj } from '@babel/core';\r\nimport { TaggedTemplateExpression } from '@babel/types';\r\nimport { ParsedMessageLegacy } from '../../../cmds/common/util';\r\n\r\nimport {\r\n  isGlobalIdentifier,\r\n  isNamedIdentifier,\r\n  unwrapMessagePartsFromTemplateLiteral\r\n} from '../source_file_utils';\r\nimport { Diagnostics } from '../../common/diagnostics';\r\n\r\nexport function makeEs2015ExtractPlugin(\r\n  messages: (ɵParsedMessage | ParsedMessageLegacy)[],\r\n  diagnostics: Diagnostics,\r\n  localizeName = '$localize'\r\n): PluginObj {\r\n  return {\r\n    visitor: {\r\n      TaggedTemplateExpression(path: NodePath<TaggedTemplateExpression>) {\r\n        const tag = path.get('tag');\r\n        if (isNamedIdentifier(tag, localizeName) && isGlobalIdentifier(tag)) {\r\n          const messageParts = unwrapMessagePartsFromTemplateLiteral(\r\n            path.node.quasi.quasis\r\n          );\r\n          const message: ɵParsedMessage | ParsedMessageLegacy = ɵparseMessage(\r\n            messageParts,\r\n            path.node.quasi.expressions\r\n          );\r\n          if (\r\n            !messages.find((msg: any) =>\r\n              message.id\r\n                ? msg.id === message.id\r\n                : msg.messageId ===\r\n                  ((<unknown>message) as ParsedMessageLegacy).messageId\r\n            )\r\n          ) {\r\n            messages.push(message);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n"]}