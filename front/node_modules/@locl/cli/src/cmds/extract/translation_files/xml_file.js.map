{"version":3,"file":"xml_file.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/extract/translation_files/xml_file.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Options {\n  selfClosing?: boolean;\n  preserveWhitespace?: boolean;\n}\n\nexport class XmlFile {\n  private output = '';\n  private indent = '';\n  private elements: string[] = [];\n  private preservingWhitespace = false;\n  toString() {\n    return this.output;\n  }\n\n  startTag(\n    name: string,\n    attributes: Record<string, string> = {},\n    { selfClosing = false, preserveWhitespace }: Options = {}\n  ): this {\n    if (!this.preservingWhitespace) {\n      this.output += this.indent;\n    }\n\n    this.output += `<${name}`;\n\n    Object.keys(attributes).forEach(attrName => {\n      if (attributes[attrName]) {\n        this.output += ` ${attrName}=\"${escapeXml(attributes[attrName])}\"`;\n      }\n    });\n\n    if (selfClosing) {\n      this.output += '/>';\n    } else {\n      this.output += '>';\n      this.elements.push(name);\n      this.incIndent();\n    }\n\n    if (preserveWhitespace !== undefined) {\n      this.preservingWhitespace = preserveWhitespace;\n    }\n    if (!this.preservingWhitespace) {\n      this.output += `\\n`;\n    }\n    return this;\n  }\n\n  endTag(name: string, { preserveWhitespace }: Options = {}): this {\n    const expectedTag = this.elements.pop();\n    if (expectedTag !== name) {\n      throw new Error(\n        `Unexpected closing tag: \"${name}\", expected: \"${expectedTag}\"`\n      );\n    }\n\n    this.decIndent();\n\n    if (!this.preservingWhitespace) {\n      this.output += this.indent;\n    }\n    this.output += `</${name}>`;\n\n    if (preserveWhitespace !== undefined) {\n      this.preservingWhitespace = preserveWhitespace;\n    }\n    if (!this.preservingWhitespace) {\n      this.output += `\\n`;\n    }\n    return this;\n  }\n\n  text(str: string): this {\n    this.output += escapeXml(str);\n    return this;\n  }\n\n  startPreserveWhitespace() {\n    this.preservingWhitespace = true;\n  }\n  stopPreserveWhitespace() {\n    this.preservingWhitespace = false;\n  }\n\n  private incIndent() {\n    this.indent = this.indent + '  ';\n  }\n  private decIndent() {\n    this.indent = this.indent.slice(0, -2);\n  }\n}\n\nconst _ESCAPED_CHARS: [RegExp, string][] = [\n  [/&/g, '&amp;'],\n  [/\"/g, '&quot;'],\n  [/'/g, '&apos;'],\n  [/</g, '&lt;'],\n  [/>/g, '&gt;']\n];\n\nfunction escapeXml(text: string): string {\n  return _ESCAPED_CHARS.reduce(\n    (t: string, entry: [RegExp, string]) => t.replace(entry[0], entry[1]),\n    text\n  );\n}\n"]}