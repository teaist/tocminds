{"version":3,"file":"xliff1_translation_serializer.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/extract/translation_files/xliff1_translation_serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ɵParsedMessage } from '@angular/localize';\r\nimport { ParsedMessageLegacy } from '../../../cmds/common/util';\r\nimport { TranslationSerializer } from './translation_serializer';\r\nimport { XmlFile } from './xml_file';\r\n\r\nexport class Xliff1TranslationSerializer implements TranslationSerializer {\r\n  renderFile(\r\n    messages: (ɵParsedMessage | ParsedMessageLegacy)[],\r\n    locale: string,\r\n    isTarget = false\r\n  ): string {\r\n    const xml = new XmlFile();\r\n    xml.startTag('xliff', {\r\n      version: '1.2',\r\n      xmlns: 'urn:oasis:names:tc:xliff:document:1.2'\r\n    });\r\n    const fileAttrs = {\r\n      ['source-language']: isTarget ? undefined : locale,\r\n      ['target-language']: locale,\r\n      datatype: 'plaintext'\r\n    };\r\n    xml.startTag('file', fileAttrs);\r\n    xml.startTag('body');\r\n    messages.forEach(message => {\r\n      xml.startTag('trans-unit', {\r\n        id:\r\n          (message as ɵParsedMessage).id ||\r\n          (message as ParsedMessageLegacy).messageId,\r\n        datatype: 'html'\r\n      });\r\n      if (!isTarget) {\r\n        this.generateMessageTag(xml, 'source', message);\r\n      }\r\n      this.generateMessageTag(xml, 'target', message);\r\n      if (message.description) {\r\n        this.renderNote(xml, 'description', message.description);\r\n      }\r\n      if (message.meaning) {\r\n        this.renderNote(xml, 'meaning', message.meaning);\r\n      }\r\n      xml.endTag('trans-unit');\r\n    });\r\n    xml.endTag('body');\r\n    xml.endTag('file');\r\n    xml.endTag('xliff');\r\n    return xml.toString();\r\n  }\r\n\r\n  private generateMessageTag(\r\n    xml: XmlFile,\r\n    tagName: string,\r\n    message: ɵParsedMessage | ParsedMessageLegacy\r\n  ) {\r\n    xml.startTag(tagName, {}, { preserveWhitespace: true });\r\n    this.renderMessage(xml, message);\r\n    xml.endTag(tagName, { preserveWhitespace: false });\r\n  }\r\n\r\n  private renderMessage(\r\n    xml: XmlFile,\r\n    message: ɵParsedMessage | ParsedMessageLegacy\r\n  ): void {\r\n    xml.text(message.messageParts[0]);\r\n    for (let i = 1; i < message.messageParts.length; i++) {\r\n      xml.startTag(\r\n        'x',\r\n        { id: message.placeholderNames[i - 1] },\r\n        { selfClosing: true }\r\n      );\r\n      xml.text(message.messageParts[i]);\r\n    }\r\n  }\r\n\r\n  private renderNote(xml: XmlFile, name: string, value: string) {\r\n    xml.startTag(\r\n      'note',\r\n      { priority: '1', from: name },\r\n      { preserveWhitespace: true }\r\n    );\r\n    xml.text(value);\r\n    xml.endTag('note', { preserveWhitespace: false });\r\n  }\r\n}\r\n"]}