{"version":3,"file":"xtb_translation_serializer.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/extract/translation_files/xtb_translation_serializer.ts"],"names":[],"mappings":";;AAUA,yCAAqC;AAErC,MAAM,OAAO,GAAG;;;;;;;;;;;;;;;;CAgBf,CAAC;AAEF,MAAa,wBAAwB;IACnC,UAAU,CACR,QAAkD,EAClD,MAAc;QAEd,MAAM,GAAG,GAAG,IAAI,kBAAO,EAAE,CAAC;QAC1B,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;QACpD,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACzB,GAAG,CAAC,QAAQ,CACV,aAAa,EACb;gBACE,EAAE,EACC,OAA0B,CAAC,EAAE;oBAC7B,OAA+B,CAAC,SAAS;gBAC5C,IAAI,EAAE,OAAO,CAAC,WAAW;gBACzB,OAAO,EAAE,OAAO,CAAC,OAAO;aACzB,EACD,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAC7B,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAChC,OAAO,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;IAEO,aAAa,CACnB,GAAY,EACZ,OAA6C;QAE7C,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpD,GAAG,CAAC,QAAQ,CACV,IAAI,EACJ,EAAE,IAAI,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EACzC,EAAE,WAAW,EAAE,IAAI,EAAE,CACtB,CAAC;YACF,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;IACH,CAAC;CACF;AAxCD,4DAwCC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ɵParsedMessage } from '@angular/localize';\r\nimport { ParsedMessageLegacy } from '../../../cmds/common/util';\r\nimport { TranslationSerializer } from './translation_serializer';\r\nimport { XmlFile } from './xml_file';\r\n\r\nconst DOCTYPE = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE translationbundle [\r\n<!ELEMENT translationbundle (translation)*>\r\n<!ATTLIST translationbundle lang CDATA #REQUIRED>\r\n\r\n<!ELEMENT translation (#PCDATA|ph)*>\r\n<!ATTLIST translation id CDATA #REQUIRED>\r\n<!ATTLIST translation desc CDATA #IMPLIED>\r\n<!ATTLIST translation meaning CDATA #IMPLIED>\r\n<!ATTLIST translation xml:space (default|preserve) \"default\">\r\n\r\n<!ELEMENT ph (#PCDATA|ex)*>\r\n<!ATTLIST ph name CDATA #REQUIRED>\r\n\r\n<!ELEMENT ex (#PCDATA)>\r\n]>\r\n`;\r\n\r\nexport class XtbTranslationSerializer implements TranslationSerializer {\r\n  renderFile(\r\n    messages: (ɵParsedMessage | ParsedMessageLegacy)[],\r\n    locale: string\r\n  ): string {\r\n    const xml = new XmlFile();\r\n    xml.startTag('translationbundle', { lang: locale });\r\n    messages.forEach(message => {\r\n      xml.startTag(\r\n        'translation',\r\n        {\r\n          id:\r\n            (message as ɵParsedMessage).id ||\r\n            (message as ParsedMessageLegacy).messageId,\r\n          desc: message.description,\r\n          meaning: message.meaning\r\n        },\r\n        { preserveWhitespace: true }\r\n      );\r\n      this.renderMessage(xml, message);\r\n      xml.endTag('translation', { preserveWhitespace: false });\r\n    });\r\n    xml.endTag('translationbundle');\r\n    return DOCTYPE + xml.toString();\r\n  }\r\n\r\n  private renderMessage(\r\n    xml: XmlFile,\r\n    message: ɵParsedMessage | ParsedMessageLegacy\r\n  ): void {\r\n    xml.text(message.messageParts[0]);\r\n    for (let i = 1; i < message.messageParts.length; i++) {\r\n      xml.startTag(\r\n        'ph',\r\n        { name: message.placeholderNames[i - 1] },\r\n        { selfClosing: true }\r\n      );\r\n      xml.text(message.messageParts[i]);\r\n    }\r\n  }\r\n}\r\n"]}