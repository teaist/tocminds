{"version":3,"file":"xmb_translation_serializer.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/extract/translation_files/xmb_translation_serializer.ts"],"names":[],"mappings":";;AAUA,yCAAqC;AAErC,MAAM,OAAO,GAAG;;;;;;;;;;;;;;;;;;wBAkBQ,CAAC;AAEzB,MAAa,wBAAwB;IACnC,UAAU,CAAC,QAAkD;QAC3D,MAAM,GAAG,GAAG,IAAI,kBAAO,EAAE,CAAC;QAC1B,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QAC9B,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACzB,GAAG,CAAC,QAAQ,CACV,KAAK,EACL;gBACE,EAAE,EACC,OAA0B,CAAC,EAAE;oBAC7B,OAA+B,CAAC,SAAS;gBAC5C,IAAI,EAAE,OAAO,CAAC,WAAW;gBACzB,OAAO,EAAE,OAAO,CAAC,OAAO;aACzB,EACD,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAC7B,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;IACxB,CAAC;IAEO,aAAa,CACnB,GAAY,EACZ,OAA6C;QAE7C,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpD,GAAG,CAAC,QAAQ,CACV,IAAI,EACJ,EAAE,IAAI,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EACzC,EAAE,WAAW,EAAE,IAAI,EAAE,CACtB,CAAC;YACF,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;IACH,CAAC;CACF;AArCD,4DAqCC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ɵParsedMessage } from '@angular/localize';\nimport { ParsedMessageLegacy } from '../../../cmds/common/util';\nimport { TranslationSerializer } from './translation_serializer';\nimport { XmlFile } from './xml_file';\n\nconst DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\n\nexport class XmbTranslationSerializer implements TranslationSerializer {\n  renderFile(messages: (ɵParsedMessage | ParsedMessageLegacy)[]): string {\n    const xml = new XmlFile();\n    xml.startTag('messagebundle');\n    messages.forEach(message => {\n      xml.startTag(\n        'msg',\n        {\n          id:\n            (message as ɵParsedMessage).id ||\n            (message as ParsedMessageLegacy).messageId,\n          desc: message.description,\n          meaning: message.meaning\n        },\n        { preserveWhitespace: true }\n      );\n      this.renderMessage(xml, message);\n      xml.endTag('msg', { preserveWhitespace: false });\n    });\n    xml.endTag('messagebundle');\n    return xml.toString();\n  }\n\n  private renderMessage(\n    xml: XmlFile,\n    message: ɵParsedMessage | ParsedMessageLegacy\n  ): void {\n    xml.text(message.messageParts[0]);\n    for (let i = 1; i < message.messageParts.length; i++) {\n      xml.startTag(\n        'ph',\n        { name: message.placeholderNames[i - 1] },\n        { selfClosing: true }\n      );\n      xml.text(message.messageParts[i]);\n    }\n  }\n}\n"]}