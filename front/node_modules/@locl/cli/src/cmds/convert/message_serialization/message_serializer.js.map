{"version":3,"file":"message_serializer.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/convert/message_serialization/message_serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Element,\n  Expansion,\n  ExpansionCase,\n  Node,\n  Text,\n  visitAll\n} from '@angular/compiler';\nimport { BaseVisitor } from '@angular/localize/src/tools/src/translate/translation_files/base_visitor';\n\nimport { TranslationParseError } from '../translation_parsers/translation_parse_error';\nimport {\n  getAttrOrThrow,\n  getAttribute\n} from '../translation_parsers/translation_utils';\n\nimport { MessageRenderer } from './message_renderer';\n\ninterface MessageSerializerConfig {\n  inlineElements: string[];\n  placeholder?: {\n    elementName: string;\n    nameAttribute: string;\n    bodyAttribute?: string;\n  };\n  placeholderContainer?: {\n    elementName: string;\n    startAttribute: string;\n    endAttribute: string;\n  };\n}\n\n/**\n * This visitor will walk over a set of XML nodes, which represent an i18n message, and serialize\n * them into a message object of type `T`.\n * The type of the serialized message is controlled by the\n */\nexport class MessageSerializer<T> extends BaseVisitor {\n  constructor(\n    private renderer: MessageRenderer<T>,\n    private config: MessageSerializerConfig\n  ) {\n    super();\n  }\n\n  serialize(nodes: Node[]): T {\n    this.renderer.startRender();\n    visitAll(this, nodes);\n    this.renderer.endRender();\n    return this.renderer.message;\n  }\n\n  visitElement(element: Element): void {\n    if (\n      this.config.placeholder &&\n      element.name === this.config.placeholder.elementName\n    ) {\n      const name = getAttrOrThrow(\n        element,\n        this.config.placeholder.nameAttribute\n      );\n      const body =\n        this.config.placeholder.bodyAttribute &&\n        getAttribute(element, this.config.placeholder.bodyAttribute);\n      this.visitPlaceholder(name, body);\n    } else if (\n      this.config.placeholderContainer &&\n      element.name === this.config.placeholderContainer.elementName\n    ) {\n      const start = getAttrOrThrow(\n        element,\n        this.config.placeholderContainer.startAttribute\n      );\n      const end = getAttrOrThrow(\n        element,\n        this.config.placeholderContainer.endAttribute\n      );\n      this.visitPlaceholderContainer(start, element.children, end);\n    } else if (this.config.inlineElements.indexOf(element.name) !== -1) {\n      visitAll(this, element.children);\n    } else {\n      throw new TranslationParseError(\n        element.sourceSpan,\n        `Invalid element found in message.`\n      );\n    }\n  }\n\n  visitText(text: Text): void {\n    this.renderer.text(text.value);\n  }\n\n  visitExpansion(expansion: Expansion): void {\n    this.renderer.startIcu();\n    this.renderer.text(`${expansion.switchValue}, ${expansion.type},`);\n    visitAll(this, expansion.cases);\n    this.renderer.endIcu();\n  }\n\n  visitExpansionCase(expansionCase: ExpansionCase): void {\n    this.renderer.text(` ${expansionCase.value} {`);\n    this.renderer.startContainer();\n    visitAll(this, expansionCase.expression);\n    this.renderer.closeContainer();\n    this.renderer.text(`}`);\n  }\n\n  visitContainedNodes(nodes: Node[]): void {\n    const length = nodes.length;\n    let index = 0;\n    while (index < length) {\n      if (!this.isPlaceholderContainer(nodes[index])) {\n        const startOfContainedNodes = index;\n        while (index < length - 1) {\n          index++;\n          if (this.isPlaceholderContainer(nodes[index])) {\n            break;\n          }\n        }\n        if (index - startOfContainedNodes > 1) {\n          // Only create a container if there are two or more contained Nodes in a row\n          this.renderer.startContainer();\n          visitAll(this, nodes.slice(startOfContainedNodes, index - 1));\n          this.renderer.closeContainer();\n        }\n      }\n      if (index < length) {\n        nodes[index].visit(this, undefined);\n      }\n      index++;\n    }\n  }\n\n  visitPlaceholder(name: string, body: string | undefined): void {\n    this.renderer.placeholder(name, body);\n  }\n\n  visitPlaceholderContainer(\n    startName: string,\n    children: Node[],\n    closeName: string\n  ): void {\n    this.renderer.startPlaceholder(startName);\n    this.visitContainedNodes(children);\n    this.renderer.closePlaceholder(closeName);\n  }\n\n  private isPlaceholderContainer(node: Node): boolean {\n    return (\n      node instanceof Element &&\n      node.name === this.config.placeholderContainer!.elementName\n    );\n  }\n}\n"]}