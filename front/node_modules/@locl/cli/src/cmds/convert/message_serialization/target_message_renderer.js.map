{"version":3,"file":"target_message_renderer.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/convert/message_serialization/target_message_renderer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MessageRenderer } from './message_renderer';\nimport { ParsedTranslation } from '../translations';\n\n/**\n * Create a `ParsedTranslation` from a set of `messageParts` and `placeholderNames`.\n *\n * @param messageParts The message parts to appear in the ParsedTranslation.\n * @param placeholderNames The names of the placeholders to intersperse between the `messageParts`.\n */\nexport function makeParsedTranslation(\n  messageParts: string[],\n  placeholderNames: string[] = [],\n  description?: string,\n  meaning?: string\n): ParsedTranslation {\n  return {\n    messageParts: makeTemplateObject(messageParts, messageParts),\n    placeholderNames,\n    description,\n    meaning,\n    text: ''\n  };\n}\n\n/**\n * Create the specialized array that is passed to tagged-string tag functions.\n *\n * @param cooked The message parts with their escape codes processed.\n * @param raw The message parts with their escaped codes as-is.\n */\nexport function makeTemplateObject(\n  cooked: string[],\n  raw: string[]\n): TemplateStringsArray {\n  Object.defineProperty(cooked, 'raw', { value: raw });\n  return cooked as any;\n}\n\n/**\n * A message renderer that outputs `ParsedTranslation` objects.\n */\nexport class TargetMessageRenderer\n  implements MessageRenderer<ParsedTranslation> {\n  private current: MessageInfo = {\n    messageParts: [],\n    placeholderNames: [],\n    text: ''\n  };\n  private icuDepth = 0;\n\n  get message(): ParsedTranslation {\n    const {\n      messageParts,\n      placeholderNames,\n      description,\n      meaning\n    } = this.current;\n    return makeParsedTranslation(\n      messageParts,\n      placeholderNames,\n      description,\n      meaning\n    );\n  }\n  startRender(): void {}\n  endRender(): void {\n    this.storeMessagePart();\n  }\n  text(text: string): void {\n    this.current.text += text;\n  }\n  description(description: string): void {\n    this.current.description = description;\n  }\n  meaning(meaning: string): void {\n    this.current.text = meaning;\n  }\n  placeholder(name: string, body: string | undefined): void {\n    this.renderPlaceholder(name);\n  }\n  startPlaceholder(name: string): void {\n    this.renderPlaceholder(name);\n  }\n  closePlaceholder(name: string): void {\n    this.renderPlaceholder(name);\n  }\n  startContainer(): void {}\n  closeContainer(): void {}\n  startIcu(): void {\n    this.icuDepth++;\n    this.text('{');\n  }\n  endIcu(): void {\n    this.icuDepth--;\n    this.text('}');\n  }\n  private normalizePlaceholderName(name: string) {\n    return name.replace(/-/g, '_');\n  }\n  private renderPlaceholder(name: string) {\n    name = this.normalizePlaceholderName(name);\n    if (this.icuDepth > 0) {\n      this.text(`{${name}}`);\n    } else {\n      this.storeMessagePart();\n      this.current.placeholderNames.push(name);\n    }\n  }\n  private storeMessagePart() {\n    this.current.messageParts.push(this.current.text);\n    this.current.text = '';\n  }\n}\n\ninterface MessageInfo {\n  messageParts: string[];\n  placeholderNames: string[];\n  text: string;\n  description?: string;\n  meaning?: string;\n}\n"]}