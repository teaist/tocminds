"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Create a `ParsedTranslation` from a set of `messageParts` and `placeholderNames`.
 *
 * @param messageParts The message parts to appear in the ParsedTranslation.
 * @param placeholderNames The names of the placeholders to intersperse between the `messageParts`.
 */
function makeParsedTranslation(messageParts, placeholderNames = [], description, meaning) {
    return {
        messageParts: makeTemplateObject(messageParts, messageParts),
        placeholderNames,
        description,
        meaning,
        text: ''
    };
}
exports.makeParsedTranslation = makeParsedTranslation;
/**
 * Create the specialized array that is passed to tagged-string tag functions.
 *
 * @param cooked The message parts with their escape codes processed.
 * @param raw The message parts with their escaped codes as-is.
 */
function makeTemplateObject(cooked, raw) {
    Object.defineProperty(cooked, 'raw', { value: raw });
    return cooked;
}
exports.makeTemplateObject = makeTemplateObject;
/**
 * A message renderer that outputs `ParsedTranslation` objects.
 */
class TargetMessageRenderer {
    constructor() {
        this.current = {
            messageParts: [],
            placeholderNames: [],
            text: ''
        };
        this.icuDepth = 0;
    }
    get message() {
        const { messageParts, placeholderNames, description, meaning } = this.current;
        return makeParsedTranslation(messageParts, placeholderNames, description, meaning);
    }
    startRender() { }
    endRender() {
        this.storeMessagePart();
    }
    text(text) {
        this.current.text += text;
    }
    description(description) {
        this.current.description = description;
    }
    meaning(meaning) {
        this.current.text = meaning;
    }
    placeholder(name, body) {
        this.renderPlaceholder(name);
    }
    startPlaceholder(name) {
        this.renderPlaceholder(name);
    }
    closePlaceholder(name) {
        this.renderPlaceholder(name);
    }
    startContainer() { }
    closeContainer() { }
    startIcu() {
        this.icuDepth++;
        this.text('{');
    }
    endIcu() {
        this.icuDepth--;
        this.text('}');
    }
    normalizePlaceholderName(name) {
        return name.replace(/-/g, '_');
    }
    renderPlaceholder(name) {
        name = this.normalizePlaceholderName(name);
        if (this.icuDepth > 0) {
            this.text(`{${name}}`);
        }
        else {
            this.storeMessagePart();
            this.current.placeholderNames.push(name);
        }
    }
    storeMessagePart() {
        this.current.messageParts.push(this.current.text);
        this.current.text = '';
    }
}
exports.TargetMessageRenderer = TargetMessageRenderer;
//# sourceMappingURL=target_message_renderer.js.map