/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { MessageRenderer } from './message_renderer';
import { ParsedTranslation } from '../translations';
/**
 * Create a `ParsedTranslation` from a set of `messageParts` and `placeholderNames`.
 *
 * @param messageParts The message parts to appear in the ParsedTranslation.
 * @param placeholderNames The names of the placeholders to intersperse between the `messageParts`.
 */
export declare function makeParsedTranslation(messageParts: string[], placeholderNames?: string[], description?: string, meaning?: string): ParsedTranslation;
/**
 * Create the specialized array that is passed to tagged-string tag functions.
 *
 * @param cooked The message parts with their escape codes processed.
 * @param raw The message parts with their escaped codes as-is.
 */
export declare function makeTemplateObject(cooked: string[], raw: string[]): TemplateStringsArray;
/**
 * A message renderer that outputs `ParsedTranslation` objects.
 */
export declare class TargetMessageRenderer implements MessageRenderer<ParsedTranslation> {
    private current;
    private icuDepth;
    get message(): ParsedTranslation;
    startRender(): void;
    endRender(): void;
    text(text: string): void;
    description(description: string): void;
    meaning(meaning: string): void;
    placeholder(name: string, body: string | undefined): void;
    startPlaceholder(name: string): void;
    closePlaceholder(name: string): void;
    startContainer(): void;
    closeContainer(): void;
    startIcu(): void;
    endIcu(): void;
    private normalizePlaceholderName;
    private renderPlaceholder;
    private storeMessagePart;
}
