{"version":3,"file":"simple_json_translation_parser.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/convert/translation_parsers/simple_json_translation_parser.ts"],"names":[],"mappings":";;AAAA;;;;;;GAMG;AACH,gDAI2B;AAE3B,+BAA+B;AAM/B;;;;;;;;;;;;GAYG;AACH,MAAa,2BAA2B;IACtC,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAEhD,QAAQ,CAAC,QAAgB,EAAE,SAAiB;QAC1C,OAAO,cAAO,CAAC,QAAQ,CAAC,KAAK,OAAO,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,SAAiB,EAAE,QAAgB;QACvC,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACpE,MAAM,kBAAkB,GAA2C,EAAE,CAAC;QACtE,KAAK,MAAM,SAAS,IAAI,YAAY,EAAE;YACpC,MAAM,aAAa,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;YAC9C,kBAAkB,CAAC,SAAS,CAAC,GAAG,4BAAiB,CAAC,aAAa,CAAC,CAAC;SAClE;QACD,OAAO;YACL,MAAM,EAAE,YAAY;YACpB,YAAY,EAAE,kBAAkB;YAChC,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;IACJ,CAAC;CACF;AApBD,kEAoBC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  ɵMessageId,\r\n  ɵParsedTranslation,\r\n  ɵparseTranslation\r\n} from '@angular/localize';\r\nimport { Diagnostics } from '../../common/diagnostics';\r\nimport { extname } from 'path';\r\nimport {\r\n  ParsedTranslationBundle,\r\n  TranslationParser\r\n} from './translation_parser';\r\n\r\n/**\r\n * A translation parser that can parse JSON that has the form:\r\n *\r\n * ```\r\n * {\r\n *   \"locale\": \"...\",\r\n *   \"translations\": {\r\n *     \"message-id\": \"Target message string\",\r\n *     ...\r\n *   }\r\n * }\r\n * ```\r\n */\r\nexport class SimpleJsonTranslationParser implements TranslationParser {\r\n  constructor(private diagnostics: Diagnostics) {}\r\n\r\n  canParse(filePath: string, _contents: string): boolean {\r\n    return extname(filePath) === '.json';\r\n  }\r\n\r\n  parse(_filePath: string, contents: string): ParsedTranslationBundle {\r\n    const { locale: parsedLocale, translations } = JSON.parse(contents);\r\n    const parsedTranslations: Record<ɵMessageId, ɵParsedTranslation> = {};\r\n    for (const messageId in translations) {\r\n      const targetMessage = translations[messageId];\r\n      parsedTranslations[messageId] = ɵparseTranslation(targetMessage);\r\n    }\r\n    return {\r\n      locale: parsedLocale,\r\n      translations: parsedTranslations,\r\n      diagnostics: this.diagnostics\r\n    };\r\n  }\r\n}\r\n"]}