{"version":3,"file":"xliff2_translation_parser.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/convert/translation_parsers/xliff2_translation_parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Element, Node, XmlParser, visitAll } from '@angular/compiler';\r\nimport { ɵMessageId, ɵParsedTranslation } from '@angular/localize';\r\nimport { Diagnostics } from '../../common/diagnostics';\r\n\r\nimport { MessageSerializer } from '../message_serialization/message_serializer';\r\nimport { TargetMessageRenderer } from '../message_serialization/target_message_renderer';\r\n\r\nimport { TranslationParseError } from './translation_parse_error';\r\nimport {\r\n  ParsedTranslationBundle,\r\n  TranslationParser\r\n} from './translation_parser';\r\nimport {\r\n  getAttrOrThrow,\r\n  getAttribute,\r\n  parseInnerRange,\r\n  XmlTranslationParserHint,\r\n  canParseXml\r\n} from './translation_utils';\r\nimport { BaseVisitor } from '@angular/localize/src/tools/src/translate/translation_files/base_visitor';\r\n\r\n/**\r\n * A translation parser that can load translations from XLIFF 2 files.\r\n *\r\n * http://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html\r\n *\r\n */\r\nexport class Xliff2TranslationParser\r\n  implements TranslationParser<XmlTranslationParserHint> {\r\n  constructor(private diagnostics: Diagnostics) {}\r\n\r\n  canParse(\r\n    filePath: string,\r\n    contents: string\r\n  ): XmlTranslationParserHint | false {\r\n    return canParseXml(filePath, contents, 'xliff', { version: '2.0' });\r\n  }\r\n\r\n  parse(filePath: string, contents: string): ParsedTranslationBundle {\r\n    const xmlParser = new XmlParser();\r\n    const xml = xmlParser.parse(contents, filePath);\r\n    const bundle = Xliff2TranslationBundleVisitor.extractBundle(\r\n      xml.rootNodes,\r\n      this.diagnostics\r\n    );\r\n    if (bundle === undefined) {\r\n      throw new Error(`Unable to parse \"${filePath}\" as XLIFF 2.0 format.`);\r\n    }\r\n    return bundle;\r\n  }\r\n}\r\n\r\ninterface BundleVisitorContext {\r\n  parsedLocale?: string;\r\n}\r\n\r\nclass Xliff2TranslationBundleVisitor extends BaseVisitor {\r\n  private bundle: ParsedTranslationBundle | undefined;\r\n\r\n  constructor(private diagnostics: Diagnostics) {\r\n    super();\r\n  }\r\n\r\n  static extractBundle(\r\n    xliff: Node[],\r\n    diagnostics: Diagnostics\r\n  ): ParsedTranslationBundle | undefined {\r\n    const visitor = new this(diagnostics);\r\n    visitAll(visitor, xliff, {});\r\n    return visitor.bundle;\r\n  }\r\n\r\n  visitElement(element: Element, { parsedLocale }: BundleVisitorContext): any {\r\n    if (element.name === 'xliff') {\r\n      parsedLocale = getAttribute(element, 'trgLang');\r\n      return visitAll(this, element.children, { parsedLocale });\r\n    } else if (element.name === 'file') {\r\n      this.bundle = {\r\n        locale: parsedLocale,\r\n        translations: Xliff2TranslationVisitor.extractTranslations(element),\r\n        diagnostics: this.diagnostics\r\n      };\r\n    } else {\r\n      return visitAll(this, element.children, { parsedLocale });\r\n    }\r\n  }\r\n}\r\n\r\nclass Xliff2TranslationVisitor extends BaseVisitor {\r\n  private translations: Record<ɵMessageId, ɵParsedTranslation> = {};\r\n\r\n  static extractTranslations(\r\n    file: Element\r\n  ): Record<string, ɵParsedTranslation> {\r\n    const visitor = new this();\r\n    visitAll(visitor, file.children);\r\n    return visitor.translations;\r\n  }\r\n\r\n  visitElement(element: Element, context: any): any {\r\n    if (element.name === 'unit') {\r\n      const externalId = getAttrOrThrow(element, 'id');\r\n      if (this.translations[externalId] !== undefined) {\r\n        throw new TranslationParseError(\r\n          element.sourceSpan,\r\n          `Duplicated translations for message \"${externalId}\"`\r\n        );\r\n      }\r\n      visitAll(this, element.children, { unit: externalId });\r\n    } else if (element.name === 'segment') {\r\n      assertTranslationUnit(element, context);\r\n      const targetMessage = element.children.find(isTargetElement);\r\n      if (targetMessage === undefined) {\r\n        throw new TranslationParseError(\r\n          element.sourceSpan,\r\n          'Missing required <target> element'\r\n        );\r\n      }\r\n      this.translations[context.unit] = serializeTargetMessage(targetMessage);\r\n    } else {\r\n      return visitAll(this, element.children);\r\n    }\r\n  }\r\n}\r\n\r\nfunction assertTranslationUnit(segment: Element, context: any) {\r\n  if (context === undefined || context.unit === undefined) {\r\n    throw new TranslationParseError(\r\n      segment.sourceSpan,\r\n      'Invalid <segment> element: should be a child of a <unit> element.'\r\n    );\r\n  }\r\n}\r\n\r\nfunction serializeTargetMessage(source: Element): ɵParsedTranslation {\r\n  const serializer = new MessageSerializer(new TargetMessageRenderer(), {\r\n    inlineElements: ['cp', 'sc', 'ec', 'mrk', 'sm', 'em'],\r\n    placeholder: {\r\n      elementName: 'ph',\r\n      nameAttribute: 'equiv',\r\n      bodyAttribute: 'disp'\r\n    },\r\n    placeholderContainer: {\r\n      elementName: 'pc',\r\n      startAttribute: 'equivStart',\r\n      endAttribute: 'equivEnd'\r\n    }\r\n  });\r\n  return serializer.serialize(parseInnerRange(source));\r\n}\r\n\r\nfunction isTargetElement(node: Node): node is Element {\r\n  return node instanceof Element && node.name === 'target';\r\n}\r\n"]}