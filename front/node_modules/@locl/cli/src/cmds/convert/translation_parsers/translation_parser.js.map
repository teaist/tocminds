{"version":3,"file":"translation_parser.js","sourceRoot":"","sources":["../../../../../../../libs/cli/src/cmds/convert/translation_parsers/translation_parser.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Diagnostics } from '../../common/diagnostics';\nimport { ParsedTranslation } from '../translations';\nimport { ɵMessageId } from '@angular/localize';\n\n/**\n * An object that holds translations that have been parsed from a translation file.\n */\nexport interface ParsedTranslationBundle {\n  locale: string | undefined;\n  sources?: Record<ɵMessageId, ParsedTranslation>;\n  translations: Record<ɵMessageId, ParsedTranslation>;\n  diagnostics: Diagnostics;\n}\n\n/**\n * Implement this interface to provide a class that can parse the contents of a translation file.\n */\nexport interface TranslationParser<Hint = true> {\n  /**\n   * Parses the given file, extracting the target locale and translations.\n   *\n   * @param filePath The absolute path to the translation file.\n   * @param contents The contents of the translation file.\n   */\n  parse(filePath: string, contents: string): ParsedTranslationBundle;\n\n  /**\n   * Returns true if this parser can parse the given file.\n   *\n   * @param filePath The absolute path to the translation file.\n   * @param contents The contents of the translation file.\n   * @param hint A value that can be used by the parser to speed up parsing of the file. This will\n   * have been provided as the return result from calling `canParse()`.\n   */\n  canParse(filePath: string, contents: string, hint: Hint): Hint | false;\n}\n"]}