"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const glob_1 = require("glob");
const path_1 = require("path");
const diagnostics_1 = require("./common/diagnostics");
const file_utils_1 = require("./common/file_utils");
const util_1 = require("./common/util");
const extractor_1 = require("./extract/extractor");
exports.command = 'extract';
exports.describe = 'Extract translations from your ivy application';
exports.builder = {
    s: {
        alias: 'source',
        required: true,
        describe: 'A glob pattern indicating what files to search for translations, e.g. `./dist/**/*.js`. This can be absolute or relative to the current working directory.'
    },
    f: {
        alias: 'format',
        required: true,
        describe: 'The format of the translation files to generate.',
        choices: ['json', 'xlf', 'xmb', 'xlf2'],
        default: 'json'
    },
    o: {
        alias: 'outputPath',
        required: true,
        describe: 'A path to where the translation file will be written. This can be absolute or relative to the current working directory.'
    },
    l: {
        alias: ['locale', 'locales'],
        required: false,
        type: 'array',
        describe: 'The locale for the extracted file, "en" by default. If you use multiple locales (e.g. "en fr es"), a new file will be generated for each locale'
    }
};
exports.handler = function (options) {
    const diagnostics = new diagnostics_1.Diagnostics();
    extractTranslations({
        sourceGlob: options['s'],
        format: options['f'],
        outputPath: options['o'],
        locales: options['l'],
        diagnostics
    });
    diagnostics.logMessages();
    process.exit(diagnostics.hasErrors ? 1 : 0);
};
function extractTranslations({ sourceGlob: source, format, outputPath: output, locales = ['en'], diagnostics }) {
    console.log(`Extracting translations from "${source}"`);
    let filesToProcess = glob_1.sync(path_1.resolve(source), {
        absolute: true,
        nodir: true
    });
    filesToProcess = file_utils_1.FileUtils.dedup(filesToProcess, /\-es(5|2015)\./, '.');
    output = path_1.resolve(output);
    const generatedFiles = [];
    let isFile;
    try {
        const stat = fs_1.statSync(output);
        isFile = stat.isFile();
    }
    catch (e) {
        isFile = !!path_1.extname(output);
    }
    if (isFile) {
        if (locales.length > 1) {
            diagnostics.error(`Multiple locales detected ("${locales.join(',')}") but output "${output}" is not a directory`);
            return;
        }
        const res = makeTranslationsFile(filesToProcess, path_1.posix.normalize(output), source, format, locales[0], diagnostics);
        if (res) {
            generatedFiles.push(res);
        }
    }
    else {
        filesToProcess.forEach(file => {
            locales.forEach(locale => {
                const newFileName = path_1.posix.join(output, path_1.basename(file, '.js').replace(/-es(5|2015)/, '') +
                    '.' +
                    locale +
                    '.' +
                    util_1.getExtension(format));
                const res = makeTranslationsFile([file], newFileName, source, format, locale, diagnostics);
                if (res) {
                    generatedFiles.push(res);
                }
            });
        });
    }
    if (!generatedFiles.length) {
        diagnostics.error(`No messages found. You should build the angular app without a language target for this command to work.`);
        return;
    }
}
exports.extractTranslations = extractTranslations;
function makeTranslationsFile(filesToProcess, fileOutput, source, format, locale, diagnostics) {
    const extractor = new extractor_1.Extractor(diagnostics);
    filesToProcess.forEach(file => {
        const contents = fs_1.readFileSync(file, 'utf8');
        extractor.extractMessages(contents);
    });
    const serializer = util_1.getTranslationSerializer(format);
    if (extractor.messages.length > 0) {
        const translationFile = serializer.renderFile(extractor.messages, locale, false);
        file_utils_1.FileUtils.writeFile(fileOutput, translationFile);
        console.log(`  Generated file "${fileOutput}"`);
        return fileOutput;
    }
    return null;
}
//# sourceMappingURL=extract.js.map