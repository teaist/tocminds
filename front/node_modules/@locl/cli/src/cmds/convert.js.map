{"version":3,"file":"convert.js","sourceRoot":"","sources":["../../../../../libs/cli/src/cmds/convert.ts"],"names":[],"mappings":";;AAAA,uHAAmH;AACnH,6BAA6B;AAC7B,+BAAsC;AACtC,sDAAmD;AACnD,oDAAgD;AAChD,wCAA+E;AAC/E,iHAA2G;AAC3G,uGAAkG;AAClG,uGAAkG;AAClG,iGAA4F;AAE/E,QAAA,OAAO,GAAG,SAAS,CAAC;AACpB,QAAA,QAAQ,GAAG,sDAAsD,CAAC;AAClE,QAAA,OAAO,GAAG;IACrB,CAAC,EAAE;QACD,KAAK,EAAE,QAAQ;QACf,QAAQ,EAAE,IAAI;QACd,QAAQ,EACN,mNAAmN;KACtN;IACD,CAAC,EAAE;QACD,KAAK,EAAE,QAAQ;QACf,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,kDAAkD;QAC5D,OAAO,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;QACvC,OAAO,EAAE,MAAM;KAChB;IACD,CAAC,EAAE;QACD,KAAK,EAAE,YAAY;QACnB,QAAQ,EAAE,IAAI;QACd,QAAQ,EACN,yHAAyH;KAC5H;CACF,CAAC;AAEW,QAAA,OAAO,GAAG,UAAS,OAAO;IACrC,MAAM,WAAW,GAAG,IAAI,yBAAW,EAAE,CAAC;IACtC,YAAY,CAAC;QACX,UAAU,EAAE,cAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACjC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAsB;QACzC,UAAU,EAAE,cAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACjC,WAAW;KACZ,CAAC,CAAC;IACH,WAAW,CAAC,WAAW,EAAE,CAAC;IAC1B,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC;AAWF,SAAgB,YAAY,CAAC,EAC3B,UAAU,EAAE,MAAM,EAClB,MAAM,EACN,UAAU,EAAE,MAAM,EAClB,WAAW,EACS;IACpB,OAAO,CAAC,GAAG,CACT,iCAAiC,MAAM,gBAAgB,MAAM,iBAAiB,MAAM,GAAG,CACxF,CAAC;IACF,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QACvC,QAAQ,EAAE,IAAI;QACd,KAAK,EAAE,IAAI;KACZ,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,IAAI,sCAAiB,CAAC;QAC9C,IAAI,mDAAuB,CAAC,WAAW,CAAC;QACxC,IAAI,mDAAuB,CAAC,WAAW,CAAC;QACxC,IAAI,6CAAoB,CAAC,WAAW,CAAC;QACrC,IAAI,4DAA2B,CAAC,WAAW,CAAC;KAC7C,CAAC,CAAC;IAEH,MAAM,kBAAkB,GAAG,iBAAiB,CAAC,WAAW,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IAC7E,IAAI,kBAAkB,CAAC,MAAM,EAAE;QAC7B,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,kBAAkB,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;YAC7C,MAAM,YAAY,GAAG,iBAAiB,CAAC,YAAY,CAAC;YACpD,QAAQ,CAAC,IAAI,CACX,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CACpC,2BAAoB,CAAC,EAAE,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAC3C,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,+BAAwB,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,eAAe,GAAG,UAAU,CAAC,UAAU,CAC3C,QAAQ,EACR,kBAAkB,CAAC,CAAC,CAAC,CAAC,MAAM,EAC5B,IAAI,CACL,CAAC;QAEF,sBAAS,CAAC,SAAS,CAAC,YAAK,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,eAAe,CAAC,CAAC;KAC/D;SAAM;QACL,WAAW,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;KACzD;AACH,CAAC;AA5CD,oCA4CC","sourcesContent":["import { TranslationLoader } from '@angular/localize/src/tools/src/translate/translation_files/translation_loader';\nimport * as glob from 'glob';\nimport { posix, resolve } from 'path';\nimport { Diagnostics } from './common/diagnostics';\nimport { FileUtils } from './common/file_utils';\nimport { getTranslationSerializer, translationToMessage } from './common/util';\nimport { SimpleJsonTranslationParser } from './convert/translation_parsers/simple_json_translation_parser';\nimport { Xliff1TranslationParser } from './convert/translation_parsers/xliff1_translation_parser';\nimport { Xliff2TranslationParser } from './convert/translation_parsers/xliff2_translation_parser';\nimport { XtbTranslationParser } from './convert/translation_parsers/xtb_translation_parser';\n\nexport const command = 'convert';\nexport const describe = 'Convert translation files from one format to another';\nexport const builder = {\n  s: {\n    alias: 'source',\n    required: true,\n    describe:\n      'A glob pattern indicating what files to convert, e.g. `./assets/**/*.xlf`. This can be absolute or relative to the current working directory. Only translation files are supported (json, xtb & xlf but not xmb).'\n  },\n  f: {\n    alias: 'format',\n    required: true,\n    describe: 'The format of the translation files to generate.',\n    choices: ['json', 'xlf', 'xtb', 'xlf2'],\n    default: 'json'\n  },\n  o: {\n    alias: 'outputPath',\n    required: true,\n    describe:\n      'A path to where the converted files will be written. This can be absolute or relative to the current working directory.'\n  }\n};\n\nexport const handler = function(options) {\n  const diagnostics = new Diagnostics();\n  convertFiles({\n    sourceGlob: resolve(options['s']),\n    format: options['f'] as TranslationFormat,\n    outputPath: resolve(options['o']),\n    diagnostics\n  });\n  diagnostics.logMessages();\n  process.exit(diagnostics.hasErrors ? 1 : 0);\n};\n\ntype TranslationFormat = 'json' | 'xtb' | 'xliff1' | 'xliff2' | 'xlf' | 'xlf2';\n\nexport interface ConvertFilesOptions {\n  sourceGlob: string;\n  format: TranslationFormat;\n  outputPath: string;\n  diagnostics: Diagnostics;\n}\n\nexport function convertFiles({\n  sourceGlob: source,\n  format,\n  outputPath: output,\n  diagnostics\n}: ConvertFilesOptions) {\n  console.log(\n    `Converting files from source \"${source}\" to format \"${format}\" and output \"${output}\"`\n  );\n  const filesToProcess = glob.sync(source, {\n    absolute: true,\n    nodir: true\n  });\n\n  const translationLoader = new TranslationLoader([\n    new Xliff2TranslationParser(diagnostics),\n    new Xliff1TranslationParser(diagnostics),\n    new XtbTranslationParser(diagnostics),\n    new SimpleJsonTranslationParser(diagnostics)\n  ]);\n\n  const translationBundles = translationLoader.loadBundles(filesToProcess, []);\n  if (translationBundles.length) {\n    const messages = [];\n    translationBundles.forEach(translationBundle => {\n      const translations = translationBundle.translations;\n      messages.push(\n        ...Object.keys(translations).map(id =>\n          translationToMessage(id, translations[id])\n        )\n      );\n    });\n\n    const serializer = getTranslationSerializer(format);\n    const translationFile = serializer.renderFile(\n      messages,\n      translationBundles[0].locale,\n      true\n    );\n\n    FileUtils.writeFile(posix.normalize(output), translationFile);\n  } else {\n    diagnostics.error(`Couldn't find any file to convert.`);\n  }\n}\n"]}