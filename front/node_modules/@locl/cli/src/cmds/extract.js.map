{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../../libs/cli/src/cmds/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync, statSync } from 'fs';\r\nimport { sync } from 'glob';\r\nimport { basename, extname, posix, resolve } from 'path';\r\nimport { Diagnostics } from './common/diagnostics';\r\nimport { FileUtils } from './common/file_utils';\r\nimport {\r\n  getExtension,\r\n  getTranslationSerializer,\r\n  TranslationFormat\r\n} from './common/util';\r\nimport { Extractor } from './extract/extractor';\r\n\r\nexport const command = 'extract';\r\nexport const describe = 'Extract translations from your ivy application';\r\nexport const builder = {\r\n  s: {\r\n    alias: 'source',\r\n    required: true,\r\n    describe:\r\n      'A glob pattern indicating what files to search for translations, e.g. `./dist/**/*.js`. This can be absolute or relative to the current working directory.'\r\n  },\r\n  f: {\r\n    alias: 'format',\r\n    required: true,\r\n    describe: 'The format of the translation files to generate.',\r\n    choices: ['json', 'xlf', 'xmb', 'xlf2'],\r\n    default: 'json'\r\n  },\r\n  o: {\r\n    alias: 'outputPath',\r\n    required: true,\r\n    describe:\r\n      'A path to where the translation file will be written. This can be absolute or relative to the current working directory.'\r\n  },\r\n  l: {\r\n    alias: ['locale', 'locales'],\r\n    required: false,\r\n    type: 'array',\r\n    describe:\r\n      'The locale for the extracted file, \"en\" by default. If you use multiple locales (e.g. \"en fr es\"), a new file will be generated for each locale'\r\n  }\r\n};\r\n\r\nexport const handler = function(options) {\r\n  const diagnostics = new Diagnostics();\r\n  extractTranslations({\r\n    sourceGlob: options['s'] as string,\r\n    format: options['f'] as TranslationFormat,\r\n    outputPath: options['o'] as string,\r\n    locales: options['l'] as string[],\r\n    diagnostics\r\n  });\r\n  diagnostics.logMessages();\r\n  process.exit(diagnostics.hasErrors ? 1 : 0);\r\n};\r\n\r\nexport interface ExtractTranslationsOptions {\r\n  sourceGlob: string;\r\n  format: TranslationFormat;\r\n  outputPath: string;\r\n  locales?: string[];\r\n  diagnostics: Diagnostics;\r\n}\r\n\r\nexport function extractTranslations({\r\n  sourceGlob: source,\r\n  format,\r\n  outputPath: output,\r\n  locales = ['en'],\r\n  diagnostics\r\n}: ExtractTranslationsOptions) {\r\n  console.log(`Extracting translations from \"${source}\"`);\r\n  let filesToProcess = sync(resolve(source), {\r\n    absolute: true,\r\n    nodir: true\r\n  });\r\n  filesToProcess = FileUtils.dedup(filesToProcess, /\\-es(5|2015)\\./, '.');\r\n  output = resolve(output);\r\n  const generatedFiles: string[] = [];\r\n  let isFile: boolean;\r\n  try {\r\n    const stat = statSync(output);\r\n    isFile = stat.isFile();\r\n  } catch (e) {\r\n    isFile = !!extname(output);\r\n  }\r\n  if (isFile) {\r\n    if (locales.length > 1) {\r\n      diagnostics.error(\r\n        `Multiple locales detected (\"${locales.join(\r\n          ','\r\n        )}\") but output \"${output}\" is not a directory`\r\n      );\r\n      return;\r\n    }\r\n    const res = makeTranslationsFile(\r\n      filesToProcess,\r\n      posix.normalize(output),\r\n      source,\r\n      format,\r\n      locales[0],\r\n      diagnostics\r\n    );\r\n    if (res) {\r\n      generatedFiles.push(res);\r\n    }\r\n  } else {\r\n    filesToProcess.forEach(file => {\r\n      locales.forEach(locale => {\r\n        const newFileName = posix.join(\r\n          output,\r\n          basename(file, '.js').replace(/-es(5|2015)/, '') +\r\n            '.' +\r\n            locale +\r\n            '.' +\r\n            getExtension(format)\r\n        );\r\n        const res = makeTranslationsFile(\r\n          [file],\r\n          newFileName,\r\n          source,\r\n          format,\r\n          locale,\r\n          diagnostics\r\n        );\r\n        if (res) {\r\n          generatedFiles.push(res);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  if (!generatedFiles.length) {\r\n    diagnostics.error(\r\n      `No messages found. You should build the angular app without a language target for this command to work.`\r\n    );\r\n    return;\r\n  }\r\n}\r\n\r\nfunction makeTranslationsFile(\r\n  filesToProcess: string[],\r\n  fileOutput: string,\r\n  source: string,\r\n  format: TranslationFormat,\r\n  locale: string,\r\n  diagnostics: Diagnostics\r\n): string | null {\r\n  const extractor = new Extractor(diagnostics);\r\n  filesToProcess.forEach(file => {\r\n    const contents = readFileSync(file, 'utf8');\r\n    extractor.extractMessages(contents);\r\n  });\r\n\r\n  const serializer = getTranslationSerializer(format);\r\n  if (extractor.messages.length > 0) {\r\n    const translationFile = serializer.renderFile(\r\n      extractor.messages,\r\n      locale,\r\n      false\r\n    );\r\n    FileUtils.writeFile(fileOutput, translationFile);\r\n    console.log(`  Generated file \"${fileOutput}\"`);\r\n    return fileOutput;\r\n  }\r\n  return null;\r\n}\r\n"]}