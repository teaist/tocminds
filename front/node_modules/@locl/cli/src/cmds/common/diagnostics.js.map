{"version":3,"file":"diagnostics.js","sourceRoot":"","sources":["../../../../../../libs/cli/src/cmds/common/diagnostics.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAE/B;;;GAGG;AACH,MAAa,WAAW;IAAxB;QACW,aAAQ,GAAG,EAAE,CAAC;IAiDzB,CAAC;IA/CC,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;IACrD,CAAC;IAED,GAAG,CAAC,OAAe;QACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,iBAAiB,CAAC,OAAe;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,GAAG,CAC/D,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,OAAO,CACvB,CAAC;QACF,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,GAAG,CACnE,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,OAAO,CACvB,CAAC;QACF,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,OAAO,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC9C;QACD,IAAI,QAAQ,CAAC,MAAM,EAAE;YACnB,OAAO,IAAI,eAAe,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClD;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC3B,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YAChC,QAAQ,CAAC,CAAC,IAAI,EAAE;gBACd,KAAK,SAAS;oBACZ,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;oBACpD,MAAM;gBACR,KAAK,OAAO;oBACV,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;oBAChD,MAAM;gBACR;oBACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;aAC3C;SACF;IACH,CAAC;CACF;AAlDD,kCAkDC","sourcesContent":["import * as chalk from 'chalk';\n\n/**\n * This class is used to collect and then report warnings and errors that occur during the execution\n * of the tools.\n */\nexport class Diagnostics {\n  readonly messages = [];\n\n  get hasErrors() {\n    return this.messages.some(m => m.type === 'error');\n  }\n\n  log(message: string) {\n    this.messages.push({ type: '', message });\n  }\n\n  warn(message: string) {\n    this.messages.push({ type: 'warning', message });\n  }\n\n  error(message: string) {\n    this.messages.push({ type: 'error', message });\n  }\n\n  formatDiagnostics(message: string): string {\n    const errors = this.messages!.filter(d => d.type === 'error').map(\n      d => ' - ' + d.message\n    );\n    const warnings = this.messages!.filter(d => d.type === 'warning').map(\n      d => ' - ' + d.message\n    );\n    if (errors.length) {\n      message += '\\nERRORS:\\n' + errors.join('\\n');\n    }\n    if (warnings.length) {\n      message += '\\nWARNINGS:\\n' + warnings.join('\\n');\n    }\n    return message;\n  }\n\n  logMessages() {\n    while (this.messages.length) {\n      const m = this.messages.shift();\n      switch (m.type) {\n        case 'warning':\n          console.warn(chalk.yellow(`Warning: ${m.message}`));\n          break;\n        case 'error':\n          console.error(chalk.red(`Error: ${m.message}`));\n          break;\n        default:\n          console.log(chalk.blue(`${m.message}`));\n      }\n    }\n  }\n}\n"]}