/**
 * @fileoverview added by tsickle
 * Generated from: cmds/common/file_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as fs from 'fs';
import * as path from 'path';
export class FileUtils {
    /**
     * @param {?} absolutePath
     * @return {?}
     */
    static readFile(absolutePath) {
        return fs.readFileSync(absolutePath, 'utf8');
    }
    /**
     * @param {?} absolutePath
     * @return {?}
     */
    static readFileBuffer(absolutePath) {
        return fs.readFileSync(absolutePath);
    }
    /**
     * @param {?} absolutePath
     * @param {?} contents
     * @return {?}
     */
    static writeFile(absolutePath, contents) {
        FileUtils.ensureDir(path.dirname(absolutePath));
        fs.writeFileSync(absolutePath, contents);
    }
    /**
     * @param {?} absolutePath
     * @return {?}
     */
    static ensureDir(absolutePath) {
        /** @type {?} */
        const parents = [];
        while (!FileUtils.isRoot(absolutePath) && !fs.existsSync(absolutePath)) {
            parents.push(absolutePath);
            absolutePath = path.dirname(absolutePath);
        }
        while (parents.length) {
            fs.mkdirSync((/** @type {?} */ (parents.pop())));
        }
    }
    /**
     * @param {?} p
     * @return {?}
     */
    static remove(p) {
        /** @type {?} */
        const stat = fs.statSync(p);
        if (stat.isFile()) {
            fs.unlinkSync(p);
        }
        else if (stat.isDirectory()) {
            fs.readdirSync(p).forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const absChild = path.resolve(p, child);
                FileUtils.remove(absChild);
            }));
            fs.rmdirSync(p);
        }
    }
    /**
     * @param {?} absolutePath
     * @return {?}
     */
    static isRoot(absolutePath) {
        return path.dirname(absolutePath) === absolutePath;
    }
    /**
     * @param {?} files
     * @param {?} pattern
     * @param {?=} replaceValue
     * @return {?}
     */
    static dedup(files, pattern, replaceValue = '') {
        /** @type {?} */
        const filesSet = files.map((/**
         * @param {?} file
         * @return {?}
         */
        file => file.replace(pattern, replaceValue)));
        /** @type {?} */
        const dedup = [];
        /** @type {?} */
        const indexes = [];
        filesSet.forEach((/**
         * @param {?} file
         * @param {?} index
         * @return {?}
         */
        (file, index) => {
            if (dedup.indexOf(file) === -1) {
                dedup.push(file);
                indexes.push(index);
            }
        }));
        return indexes.map((/**
         * @param {?} index
         * @return {?}
         */
        index => files[index]));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZV91dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bsb2NsL2NsaS8iLCJzb3VyY2VzIjpbImNtZHMvY29tbW9uL2ZpbGVfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFFN0IsTUFBTSxPQUFPLFNBQVM7Ozs7O0lBQ3BCLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBb0I7UUFDbEMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBb0I7UUFDeEMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7OztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBb0IsRUFBRSxRQUF5QjtRQUM5RCxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNoRCxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBb0I7O2NBQzdCLE9BQU8sR0FBYSxFQUFFO1FBQzVCLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN0RSxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNCLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3JCLEVBQUUsQ0FBQyxTQUFTLENBQUMsbUJBQUEsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFDLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFTOztjQUNmLElBQUksR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNqQixFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xCO2FBQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDN0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUU7O3NCQUMxQixRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO2dCQUN2QyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdCLENBQUMsRUFBQyxDQUFDO1lBQ0gsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFvQjtRQUNoQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssWUFBWSxDQUFDO0lBQ3JELENBQUM7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQWUsRUFBRSxPQUFlLEVBQUUsWUFBWSxHQUFHLEVBQUU7O2NBQ3hELFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRzs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLEVBQUM7O2NBQ2pFLEtBQUssR0FBRyxFQUFFOztjQUNWLE9BQU8sR0FBRyxFQUFFO1FBQ2xCLFFBQVEsQ0FBQyxPQUFPOzs7OztRQUFDLENBQUMsSUFBWSxFQUFFLEtBQWEsRUFBRSxFQUFFO1lBQy9DLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNyQjtRQUNILENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUMsR0FBRzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUM7SUFDNUMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuZXhwb3J0IGNsYXNzIEZpbGVVdGlscyB7XG4gIHN0YXRpYyByZWFkRmlsZShhYnNvbHV0ZVBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhhYnNvbHV0ZVBhdGgsICd1dGY4Jyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZEZpbGVCdWZmZXIoYWJzb2x1dGVQYXRoOiBzdHJpbmcpOiBCdWZmZXIge1xuICAgIHJldHVybiBmcy5yZWFkRmlsZVN5bmMoYWJzb2x1dGVQYXRoKTtcbiAgfVxuXG4gIHN0YXRpYyB3cml0ZUZpbGUoYWJzb2x1dGVQYXRoOiBzdHJpbmcsIGNvbnRlbnRzOiBzdHJpbmcgfCBCdWZmZXIpIHtcbiAgICBGaWxlVXRpbHMuZW5zdXJlRGlyKHBhdGguZGlybmFtZShhYnNvbHV0ZVBhdGgpKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKGFic29sdXRlUGF0aCwgY29udGVudHMpO1xuICB9XG5cbiAgc3RhdGljIGVuc3VyZURpcihhYnNvbHV0ZVBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHBhcmVudHM6IHN0cmluZ1tdID0gW107XG4gICAgd2hpbGUgKCFGaWxlVXRpbHMuaXNSb290KGFic29sdXRlUGF0aCkgJiYgIWZzLmV4aXN0c1N5bmMoYWJzb2x1dGVQYXRoKSkge1xuICAgICAgcGFyZW50cy5wdXNoKGFic29sdXRlUGF0aCk7XG4gICAgICBhYnNvbHV0ZVBhdGggPSBwYXRoLmRpcm5hbWUoYWJzb2x1dGVQYXRoKTtcbiAgICB9XG4gICAgd2hpbGUgKHBhcmVudHMubGVuZ3RoKSB7XG4gICAgICBmcy5ta2RpclN5bmMocGFyZW50cy5wb3AoKSEpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyByZW1vdmUocDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKHApO1xuICAgIGlmIChzdGF0LmlzRmlsZSgpKSB7XG4gICAgICBmcy51bmxpbmtTeW5jKHApO1xuICAgIH0gZWxzZSBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICBmcy5yZWFkZGlyU3luYyhwKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgY29uc3QgYWJzQ2hpbGQgPSBwYXRoLnJlc29sdmUocCwgY2hpbGQpO1xuICAgICAgICBGaWxlVXRpbHMucmVtb3ZlKGFic0NoaWxkKTtcbiAgICAgIH0pO1xuICAgICAgZnMucm1kaXJTeW5jKHApO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBpc1Jvb3QoYWJzb2x1dGVQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcGF0aC5kaXJuYW1lKGFic29sdXRlUGF0aCkgPT09IGFic29sdXRlUGF0aDtcbiAgfVxuXG4gIHN0YXRpYyBkZWR1cChmaWxlczogc3RyaW5nW10sIHBhdHRlcm46IFJlZ0V4cCwgcmVwbGFjZVZhbHVlID0gJycpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgZmlsZXNTZXQgPSBmaWxlcy5tYXAoZmlsZSA9PiBmaWxlLnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZVZhbHVlKSk7XG4gICAgY29uc3QgZGVkdXAgPSBbXTtcbiAgICBjb25zdCBpbmRleGVzID0gW107XG4gICAgZmlsZXNTZXQuZm9yRWFjaCgoZmlsZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBpZiAoZGVkdXAuaW5kZXhPZihmaWxlKSA9PT0gLTEpIHtcbiAgICAgICAgZGVkdXAucHVzaChmaWxlKTtcbiAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaW5kZXhlcy5tYXAoaW5kZXggPT4gZmlsZXNbaW5kZXhdKTtcbiAgfVxufVxuIl19