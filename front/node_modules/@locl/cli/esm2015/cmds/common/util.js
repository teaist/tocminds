/**
 * @fileoverview added by tsickle
 * Generated from: cmds/common/util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonTranslationSerializer } from '../extract/translation_files/json_translation_serializer';
import { Xliff1TranslationSerializer } from '../extract/translation_files/xliff1_translation_serializer';
import { Xliff2TranslationSerializer } from '../extract/translation_files/xliff2_translation_serializer';
import { XmbTranslationSerializer } from '../extract/translation_files/xmb_translation_serializer';
import { XtbTranslationSerializer } from '../extract/translation_files/xtb_translation_serializer';
/**
 * @param {?} format
 * @return {?}
 */
export function getTranslationSerializer(format) {
    switch (format) {
        case 'json':
            return new JsonTranslationSerializer();
        case 'xliff1':
        case 'xlf':
            return new Xliff1TranslationSerializer();
        case 'xliff2':
        case 'xlf2':
            return new Xliff2TranslationSerializer();
        case 'xmb':
            return new XmbTranslationSerializer();
        case 'xtb':
            return new XtbTranslationSerializer();
    }
}
/**
 * @param {?} format
 * @return {?}
 */
export function getExtension(format) {
    switch (format) {
        case 'json':
        case 'xmb':
        case 'xtb':
            return format;
        default:
            return 'xlf';
    }
}
/**
 * The character used to mark the start and end of a "block" in a `$localize` tagged string.
 * A block can indicate metadata about the message or specify a name of a placeholder for a
 * substitution expressions.
 *
 * For example:
 *
 * ```ts
 * $localize`Hello, ${title}:title:!`;
 * $localize`:meaning|description\@\@id:source message text`;
 * ```
 * @type {?}
 */
export const BLOCK_MARKER = ':';
/**
 * Find the end of a "marked block" indicated by the first non-escaped colon.
 *
 * @throws an error if the block is unterminated
 * @param {?} cooked The cooked string (where escaped chars have been processed)
 * @param {?} raw The raw string (where escape sequences are still in place)
 *
 * @return {?} the index of the end of block marker
 */
export function findEndOfBlock(cooked, raw) {
    /************************************************************************************************
     * This function is repeated in `src/localize/src/localize.ts` and the two should be kept in sync.
     * (See that file for more explanation of why.)
     ************************************************************************************************/
    for (let cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {
        if (raw[rawIndex] === '\\') {
            rawIndex++;
        }
        else if (cooked[cookedIndex] === BLOCK_MARKER) {
            return cookedIndex;
        }
    }
    throw new Error(`Unterminated $localize metadata block in "${raw}".`);
}
/**
 * Split a message part (`cooked` + `raw`) into an optional delimited "block" off the front and the
 * rest of the text of the message part.
 *
 * Blocks appear at the start of message parts. They are delimited by a colon `:` character at the
 * start and end of the block.
 *
 * If the block is in the first message part then it will be metadata about the whole message:
 * meaning, description, id.  Otherwise it will be metadata about the immediately preceding
 * substitution: placeholder name.
 *
 * Since blocks are optional, it is possible that the content of a message block actually starts
 * with a block marker. In this case the marker must be escaped `\:`.
 *
 * @throws an error if the `block` is unterminated
 * @param {?} cooked The cooked version of the message part to parse.
 * @param {?} raw The raw version of the message part to parse.
 * @return {?} An object containing the `text` of the message part and the text of the `block`, if it
 * exists.
 */
export function splitBlock(cooked, raw) {
    if (raw.charAt(0) !== BLOCK_MARKER) {
        return { text: cooked };
    }
    else {
        /** @type {?} */
        const endOfBlock = findEndOfBlock(cooked, raw);
        return {
            block: cooked.substring(1, endOfBlock),
            text: cooked.substring(endOfBlock + 1)
        };
    }
}
/**
 * @param {?} index
 * @return {?}
 */
function computePlaceholderName(index) {
    return index === 1 ? 'PH' : `PH_${index - 1}`;
}
/**
 * @param {?} id
 * @param {?} translation
 * @return {?}
 */
export function translationToMessage(id, translation) {
    /** @type {?} */
    const messageParts = translation.messageParts;
    /** @type {?} */
    const legacyIds = [];
    /** @type {?} */
    const cleanedMessageParts = [messageParts[0]];
    /** @type {?} */
    const substitutions = {};
    /** @type {?} */
    const placeholderNames = [];
    /** @type {?} */
    let text = messageParts[0];
    for (let i = 1; i < messageParts.length; i++) {
        const { text: messagePart, block: placeholderName = translation.placeholderNames[i - 1] ||
            computePlaceholderName(i) } = splitBlock(messageParts[i], messageParts.raw[i]);
        text += `{$${placeholderName}}${messagePart}`;
        if (translation.placeholderNames.length) {
            substitutions[placeholderName] = translation.placeholderNames[i - 1];
        }
        placeholderNames.push(placeholderName);
        cleanedMessageParts.push(messagePart);
    }
    return {
        id,
        legacyIds,
        substitutions,
        text,
        meaning: translation.meaning || '',
        description: translation.description || '',
        messageParts: cleanedMessageParts,
        placeholderNames
    };
}
/**
 * @record
 */
export function ParsedMessageLegacy() { }
if (false) {
    /**
     * The key used to look up the appropriate translation target.
     * @type {?}
     */
    ParsedMessageLegacy.prototype.messageId;
    /**
     * Legacy message ids, if provided.
     *
     * In legacy message formats the message id can only be computed directly from the original
     * template source.
     *
     * Since this information is not available in `$localize` calls, the legacy message ids may be
     * attached by the compiler to the `$localize` metablock so it can be used if needed at the point
     * of translation if the translations are encoded using the legacy message id.
     * @type {?}
     */
    ParsedMessageLegacy.prototype.legacyIds;
    /**
     * A mapping of placeholder names to substitution values.
     * @type {?}
     */
    ParsedMessageLegacy.prototype.substitutions;
    /**
     * A human readable rendering of the message
     * @type {?}
     */
    ParsedMessageLegacy.prototype.messageString;
    /**
     * The meaning of the `message`, used to distinguish identical `messageString`s.
     * @type {?}
     */
    ParsedMessageLegacy.prototype.meaning;
    /**
     * The description of the `message`, used to aid translation.
     * @type {?}
     */
    ParsedMessageLegacy.prototype.description;
    /**
     * The static parts of the message.
     * @type {?}
     */
    ParsedMessageLegacy.prototype.messageParts;
    /**
     * The names of the placeholders that will be replaced with substitutions.
     * @type {?}
     */
    ParsedMessageLegacy.prototype.placeholderNames;
}
//# sourceMappingURL=data:application/json;base64,