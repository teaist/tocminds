/**
 * @fileoverview added by tsickle
 * Generated from: cmds/common/diagnostics.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as chalk from 'chalk';
/**
 * This class is used to collect and then report warnings and errors that occur during the execution
 * of the tools.
 */
export class Diagnostics {
    constructor() {
        this.messages = [];
    }
    /**
     * @return {?}
     */
    get hasErrors() {
        return this.messages.some((/**
         * @param {?} m
         * @return {?}
         */
        m => m.type === 'error'));
    }
    /**
     * @param {?} message
     * @return {?}
     */
    log(message) {
        this.messages.push({ type: '', message });
    }
    /**
     * @param {?} message
     * @return {?}
     */
    warn(message) {
        this.messages.push({ type: 'warning', message });
    }
    /**
     * @param {?} message
     * @return {?}
     */
    error(message) {
        this.messages.push({ type: 'error', message });
    }
    /**
     * @param {?} message
     * @return {?}
     */
    formatDiagnostics(message) {
        /** @type {?} */
        const errors = (/** @type {?} */ (this.messages)).filter((/**
         * @param {?} d
         * @return {?}
         */
        d => d.type === 'error')).map((/**
         * @param {?} d
         * @return {?}
         */
        d => ' - ' + d.message));
        /** @type {?} */
        const warnings = (/** @type {?} */ (this.messages)).filter((/**
         * @param {?} d
         * @return {?}
         */
        d => d.type === 'warning')).map((/**
         * @param {?} d
         * @return {?}
         */
        d => ' - ' + d.message));
        if (errors.length) {
            message += '\nERRORS:\n' + errors.join('\n');
        }
        if (warnings.length) {
            message += '\nWARNINGS:\n' + warnings.join('\n');
        }
        return message;
    }
    /**
     * @return {?}
     */
    logMessages() {
        while (this.messages.length) {
            /** @type {?} */
            const m = this.messages.shift();
            switch (m.type) {
                case 'warning':
                    console.warn(chalk.yellow(`Warning: ${m.message}`));
                    break;
                case 'error':
                    console.error(chalk.red(`Error: ${m.message}`));
                    break;
                default:
                    console.log(chalk.blue(`${m.message}`));
            }
        }
    }
}
if (false) {
    /** @type {?} */
    Diagnostics.prototype.messages;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc3RpY3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2NvbW1vbi9kaWFnbm9zdGljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDOzs7OztBQU0vQixNQUFNLE9BQU8sV0FBVztJQUF4QjtRQUNXLGFBQVEsR0FBRyxFQUFFLENBQUM7SUFpRHpCLENBQUM7Ozs7SUEvQ0MsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFDLENBQUM7SUFDckQsQ0FBQzs7Ozs7SUFFRCxHQUFHLENBQUMsT0FBZTtRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7OztJQUVELElBQUksQ0FBQyxPQUFlO1FBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLE9BQWU7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxPQUFlOztjQUN6QixNQUFNLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFDLENBQUMsR0FBRzs7OztRQUMvRCxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxFQUN2Qjs7Y0FDSyxRQUFRLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFDLENBQUMsR0FBRzs7OztRQUNuRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxFQUN2QjtRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNqQixPQUFPLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUM7UUFDRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbkIsT0FBTyxJQUFJLGVBQWUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFOztrQkFDckIsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQy9CLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDZCxLQUFLLFNBQVM7b0JBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDcEQsTUFBTTtnQkFDUixLQUFLLE9BQU87b0JBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDaEQsTUFBTTtnQkFDUjtvQkFDRSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzNDO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7OztJQWpEQywrQkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjaGFsayBmcm9tICdjaGFsayc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyB1c2VkIHRvIGNvbGxlY3QgYW5kIHRoZW4gcmVwb3J0IHdhcm5pbmdzIGFuZCBlcnJvcnMgdGhhdCBvY2N1ciBkdXJpbmcgdGhlIGV4ZWN1dGlvblxuICogb2YgdGhlIHRvb2xzLlxuICovXG5leHBvcnQgY2xhc3MgRGlhZ25vc3RpY3Mge1xuICByZWFkb25seSBtZXNzYWdlcyA9IFtdO1xuXG4gIGdldCBoYXNFcnJvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXMuc29tZShtID0+IG0udHlwZSA9PT0gJ2Vycm9yJyk7XG4gIH1cblxuICBsb2cobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKHsgdHlwZTogJycsIG1lc3NhZ2UgfSk7XG4gIH1cblxuICB3YXJuKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHRoaXMubWVzc2FnZXMucHVzaCh7IHR5cGU6ICd3YXJuaW5nJywgbWVzc2FnZSB9KTtcbiAgfVxuXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHRoaXMubWVzc2FnZXMucHVzaCh7IHR5cGU6ICdlcnJvcicsIG1lc3NhZ2UgfSk7XG4gIH1cblxuICBmb3JtYXREaWFnbm9zdGljcyhtZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVycm9ycyA9IHRoaXMubWVzc2FnZXMhLmZpbHRlcihkID0+IGQudHlwZSA9PT0gJ2Vycm9yJykubWFwKFxuICAgICAgZCA9PiAnIC0gJyArIGQubWVzc2FnZVxuICAgICk7XG4gICAgY29uc3Qgd2FybmluZ3MgPSB0aGlzLm1lc3NhZ2VzIS5maWx0ZXIoZCA9PiBkLnR5cGUgPT09ICd3YXJuaW5nJykubWFwKFxuICAgICAgZCA9PiAnIC0gJyArIGQubWVzc2FnZVxuICAgICk7XG4gICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgIG1lc3NhZ2UgKz0gJ1xcbkVSUk9SUzpcXG4nICsgZXJyb3JzLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgICBpZiAod2FybmluZ3MubGVuZ3RoKSB7XG4gICAgICBtZXNzYWdlICs9ICdcXG5XQVJOSU5HUzpcXG4nICsgd2FybmluZ3Muam9pbignXFxuJyk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG5cbiAgbG9nTWVzc2FnZXMoKSB7XG4gICAgd2hpbGUgKHRoaXMubWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBtID0gdGhpcy5tZXNzYWdlcy5zaGlmdCgpO1xuICAgICAgc3dpdGNoIChtLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgICAgY29uc29sZS53YXJuKGNoYWxrLnllbGxvdyhgV2FybmluZzogJHttLm1lc3NhZ2V9YCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihjaGFsay5yZWQoYEVycm9yOiAke20ubWVzc2FnZX1gKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5sb2coY2hhbGsuYmx1ZShgJHttLm1lc3NhZ2V9YCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19