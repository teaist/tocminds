/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/source_files/es5_extract_plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ɵparseMessage } from '@angular/localize';
import { isGlobalIdentifier, isNamedIdentifier, unwrapMessagePartsFromLocalizeCall, unwrapSubstitutionsFromLocalizeCall } from '../source_file_utils';
/**
 * @param {?} messages
 * @param {?} diagnostics
 * @param {?=} localizeName
 * @return {?}
 */
export function makeEs5ExtractPlugin(messages, diagnostics, localizeName = '$localize') {
    return {
        visitor: {
            /**
             * @param {?} callPath
             * @return {?}
             */
            CallExpression(callPath) {
                /** @type {?} */
                const calleePath = callPath.get('callee');
                if (isNamedIdentifier(calleePath, localizeName) &&
                    isGlobalIdentifier(calleePath)) {
                    /** @type {?} */
                    const messageParts = unwrapMessagePartsFromLocalizeCall(callPath);
                    /** @type {?} */
                    const expressions = unwrapSubstitutionsFromLocalizeCall(callPath.node);
                    /** @type {?} */
                    const message = ɵparseMessage(messageParts, expressions);
                    if (!messages.find((/**
                     * @param {?} msg
                     * @return {?}
                     */
                    (msg) => message.id
                        ? msg.id === message.id
                        : msg.messageId ===
                            ((/** @type {?} */ (((/** @type {?} */ (message)))))).messageId))) {
                        messages.push(message);
                    }
                }
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXM1X2V4dHJhY3RfcGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxvY2wvY2xpLyIsInNvdXJjZXMiOlsiY21kcy9leHRyYWN0L3NvdXJjZV9maWxlcy9lczVfZXh0cmFjdF9wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxFQUFrQixhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUtsRSxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLGlCQUFpQixFQUNqQixrQ0FBa0MsRUFDbEMsbUNBQW1DLEVBQ3BDLE1BQU0sc0JBQXNCLENBQUM7Ozs7Ozs7QUFHOUIsTUFBTSxVQUFVLG9CQUFvQixDQUNsQyxRQUFrRCxFQUNsRCxXQUF3QixFQUN4QixZQUFZLEdBQUcsV0FBVztJQUUxQixPQUFPO1FBQ0wsT0FBTyxFQUFFOzs7OztZQUNQLGNBQWMsQ0FBQyxRQUFrQzs7c0JBQ3pDLFVBQVUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztnQkFDekMsSUFDRSxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDO29CQUMzQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsRUFDOUI7OzBCQUNNLFlBQVksR0FBRyxrQ0FBa0MsQ0FBQyxRQUFRLENBQUM7OzBCQUMzRCxXQUFXLEdBQUcsbUNBQW1DLENBQ3JELFFBQVEsQ0FBQyxJQUFJLENBQ2Q7OzBCQUNLLE9BQU8sR0FBeUMsYUFBYSxDQUNqRSxZQUFZLEVBQ1osV0FBVyxDQUNaO29CQUNELElBQ0UsQ0FBQyxRQUFRLENBQUMsSUFBSTs7OztvQkFBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQzFCLE9BQU8sQ0FBQyxFQUFFO3dCQUNSLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFO3dCQUN2QixDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVM7NEJBQ2IsQ0FBQyxtQkFBQSxDQUFDLG1CQUFTLE9BQU8sRUFBQSxDQUFDLEVBQXVCLENBQUMsQ0FBQyxTQUFTLEVBQzFELEVBQ0Q7d0JBQ0EsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDeEI7aUJBQ0Y7WUFDSCxDQUFDO1NBQ0Y7S0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IMm1UGFyc2VkTWVzc2FnZSwgybVwYXJzZU1lc3NhZ2UgfSBmcm9tICdAYW5ndWxhci9sb2NhbGl6ZSc7XG5pbXBvcnQgeyBOb2RlUGF0aCwgUGx1Z2luT2JqIH0gZnJvbSAnQGJhYmVsL2NvcmUnO1xuaW1wb3J0IHsgQ2FsbEV4cHJlc3Npb24gfSBmcm9tICdAYmFiZWwvdHlwZXMnO1xuaW1wb3J0IHsgUGFyc2VkTWVzc2FnZUxlZ2FjeSB9IGZyb20gJy4uLy4uLy4uL2NtZHMvY29tbW9uL3V0aWwnO1xuXG5pbXBvcnQge1xuICBpc0dsb2JhbElkZW50aWZpZXIsXG4gIGlzTmFtZWRJZGVudGlmaWVyLFxuICB1bndyYXBNZXNzYWdlUGFydHNGcm9tTG9jYWxpemVDYWxsLFxuICB1bndyYXBTdWJzdGl0dXRpb25zRnJvbUxvY2FsaXplQ2FsbFxufSBmcm9tICcuLi9zb3VyY2VfZmlsZV91dGlscyc7XG5pbXBvcnQgeyBEaWFnbm9zdGljcyB9IGZyb20gJy4uLy4uL2NvbW1vbi9kaWFnbm9zdGljcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRXM1RXh0cmFjdFBsdWdpbihcbiAgbWVzc2FnZXM6ICjJtVBhcnNlZE1lc3NhZ2UgfCBQYXJzZWRNZXNzYWdlTGVnYWN5KVtdLFxuICBkaWFnbm9zdGljczogRGlhZ25vc3RpY3MsXG4gIGxvY2FsaXplTmFtZSA9ICckbG9jYWxpemUnXG4pOiBQbHVnaW5PYmoge1xuICByZXR1cm4ge1xuICAgIHZpc2l0b3I6IHtcbiAgICAgIENhbGxFeHByZXNzaW9uKGNhbGxQYXRoOiBOb2RlUGF0aDxDYWxsRXhwcmVzc2lvbj4pIHtcbiAgICAgICAgY29uc3QgY2FsbGVlUGF0aCA9IGNhbGxQYXRoLmdldCgnY2FsbGVlJyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBpc05hbWVkSWRlbnRpZmllcihjYWxsZWVQYXRoLCBsb2NhbGl6ZU5hbWUpICYmXG4gICAgICAgICAgaXNHbG9iYWxJZGVudGlmaWVyKGNhbGxlZVBhdGgpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VQYXJ0cyA9IHVud3JhcE1lc3NhZ2VQYXJ0c0Zyb21Mb2NhbGl6ZUNhbGwoY2FsbFBhdGgpO1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25zID0gdW53cmFwU3Vic3RpdHV0aW9uc0Zyb21Mb2NhbGl6ZUNhbGwoXG4gICAgICAgICAgICBjYWxsUGF0aC5ub2RlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlOiDJtVBhcnNlZE1lc3NhZ2UgfCBQYXJzZWRNZXNzYWdlTGVnYWN5ID0gybVwYXJzZU1lc3NhZ2UoXG4gICAgICAgICAgICBtZXNzYWdlUGFydHMsXG4gICAgICAgICAgICBleHByZXNzaW9uc1xuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW1lc3NhZ2VzLmZpbmQoKG1zZzogYW55KSA9PlxuICAgICAgICAgICAgICBtZXNzYWdlLmlkXG4gICAgICAgICAgICAgICAgPyBtc2cuaWQgPT09IG1lc3NhZ2UuaWRcbiAgICAgICAgICAgICAgICA6IG1zZy5tZXNzYWdlSWQgPT09XG4gICAgICAgICAgICAgICAgICAoKDx1bmtub3duPm1lc3NhZ2UpIGFzIFBhcnNlZE1lc3NhZ2VMZWdhY3kpLm1lc3NhZ2VJZFxuICAgICAgICAgICAgKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgbWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iXX0=