/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/translation_files/xtb_translation_serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { XmlFile } from './xml_file';
/** @type {?} */
const DOCTYPE = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE translationbundle [
<!ELEMENT translationbundle (translation)*>
<!ATTLIST translationbundle lang CDATA #REQUIRED>

<!ELEMENT translation (#PCDATA|ph)*>
<!ATTLIST translation id CDATA #REQUIRED>
<!ATTLIST translation desc CDATA #IMPLIED>
<!ATTLIST translation meaning CDATA #IMPLIED>
<!ATTLIST translation xml:space (default|preserve) "default">

<!ELEMENT ph (#PCDATA|ex)*>
<!ATTLIST ph name CDATA #REQUIRED>

<!ELEMENT ex (#PCDATA)>
]>
`;
export class XtbTranslationSerializer {
    /**
     * @param {?} messages
     * @param {?} locale
     * @return {?}
     */
    renderFile(messages, locale) {
        /** @type {?} */
        const xml = new XmlFile();
        xml.startTag('translationbundle', { lang: locale });
        messages.forEach((/**
         * @param {?} message
         * @return {?}
         */
        message => {
            xml.startTag('translation', {
                id: ((/** @type {?} */ (message))).id ||
                    ((/** @type {?} */ (message))).messageId,
                desc: message.description,
                meaning: message.meaning
            }, { preserveWhitespace: true });
            this.renderMessage(xml, message);
            xml.endTag('translation', { preserveWhitespace: false });
        }));
        xml.endTag('translationbundle');
        return DOCTYPE + xml.toString();
    }
    /**
     * @private
     * @param {?} xml
     * @param {?} message
     * @return {?}
     */
    renderMessage(xml, message) {
        xml.text(message.messageParts[0]);
        for (let i = 1; i < message.messageParts.length; i++) {
            xml.startTag('ph', { name: message.placeholderNames[i - 1] }, { selfClosing: true });
            xml.text(message.messageParts[i]);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHRiX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2V4dHJhY3QvdHJhbnNsYXRpb25fZmlsZXMveHRiX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFVQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDOztNQUUvQixPQUFPLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQmY7QUFFRCxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7SUFDbkMsVUFBVSxDQUNSLFFBQWtELEVBQ2xELE1BQWM7O2NBRVIsR0FBRyxHQUFHLElBQUksT0FBTyxFQUFFO1FBQ3pCLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNwRCxRQUFRLENBQUMsT0FBTzs7OztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCLEdBQUcsQ0FBQyxRQUFRLENBQ1YsYUFBYSxFQUNiO2dCQUNFLEVBQUUsRUFDQSxDQUFDLG1CQUFBLE9BQU8sRUFBa0IsQ0FBQyxDQUFDLEVBQUU7b0JBQzlCLENBQUMsbUJBQUEsT0FBTyxFQUF1QixDQUFDLENBQUMsU0FBUztnQkFDNUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxXQUFXO2dCQUN6QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87YUFDekIsRUFDRCxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUM3QixDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDakMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzNELENBQUMsRUFBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sT0FBTyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7Ozs7O0lBRU8sYUFBYSxDQUNuQixHQUFZLEVBQ1osT0FBNkM7UUFFN0MsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BELEdBQUcsQ0FBQyxRQUFRLENBQ1YsSUFBSSxFQUNKLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFDekMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQ3RCLENBQUM7WUFDRixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxyXG4gKi9cclxuaW1wb3J0IHsgybVQYXJzZWRNZXNzYWdlIH0gZnJvbSAnQGFuZ3VsYXIvbG9jYWxpemUnO1xyXG5pbXBvcnQgeyBQYXJzZWRNZXNzYWdlTGVnYWN5IH0gZnJvbSAnLi4vLi4vLi4vY21kcy9jb21tb24vdXRpbCc7XHJcbmltcG9ydCB7IFRyYW5zbGF0aW9uU2VyaWFsaXplciB9IGZyb20gJy4vdHJhbnNsYXRpb25fc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IFhtbEZpbGUgfSBmcm9tICcuL3htbF9maWxlJztcclxuXHJcbmNvbnN0IERPQ1RZUEUgPSBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+XHJcbjwhRE9DVFlQRSB0cmFuc2xhdGlvbmJ1bmRsZSBbXHJcbjwhRUxFTUVOVCB0cmFuc2xhdGlvbmJ1bmRsZSAodHJhbnNsYXRpb24pKj5cclxuPCFBVFRMSVNUIHRyYW5zbGF0aW9uYnVuZGxlIGxhbmcgQ0RBVEEgI1JFUVVJUkVEPlxyXG5cclxuPCFFTEVNRU5UIHRyYW5zbGF0aW9uICgjUENEQVRBfHBoKSo+XHJcbjwhQVRUTElTVCB0cmFuc2xhdGlvbiBpZCBDREFUQSAjUkVRVUlSRUQ+XHJcbjwhQVRUTElTVCB0cmFuc2xhdGlvbiBkZXNjIENEQVRBICNJTVBMSUVEPlxyXG48IUFUVExJU1QgdHJhbnNsYXRpb24gbWVhbmluZyBDREFUQSAjSU1QTElFRD5cclxuPCFBVFRMSVNUIHRyYW5zbGF0aW9uIHhtbDpzcGFjZSAoZGVmYXVsdHxwcmVzZXJ2ZSkgXCJkZWZhdWx0XCI+XHJcblxyXG48IUVMRU1FTlQgcGggKCNQQ0RBVEF8ZXgpKj5cclxuPCFBVFRMSVNUIHBoIG5hbWUgQ0RBVEEgI1JFUVVJUkVEPlxyXG5cclxuPCFFTEVNRU5UIGV4ICgjUENEQVRBKT5cclxuXT5cclxuYDtcclxuXHJcbmV4cG9ydCBjbGFzcyBYdGJUcmFuc2xhdGlvblNlcmlhbGl6ZXIgaW1wbGVtZW50cyBUcmFuc2xhdGlvblNlcmlhbGl6ZXIge1xyXG4gIHJlbmRlckZpbGUoXHJcbiAgICBtZXNzYWdlczogKMm1UGFyc2VkTWVzc2FnZSB8IFBhcnNlZE1lc3NhZ2VMZWdhY3kpW10sXHJcbiAgICBsb2NhbGU6IHN0cmluZ1xyXG4gICk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB4bWwgPSBuZXcgWG1sRmlsZSgpO1xyXG4gICAgeG1sLnN0YXJ0VGFnKCd0cmFuc2xhdGlvbmJ1bmRsZScsIHsgbGFuZzogbG9jYWxlIH0pO1xyXG4gICAgbWVzc2FnZXMuZm9yRWFjaChtZXNzYWdlID0+IHtcclxuICAgICAgeG1sLnN0YXJ0VGFnKFxyXG4gICAgICAgICd0cmFuc2xhdGlvbicsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6XHJcbiAgICAgICAgICAgIChtZXNzYWdlIGFzIMm1UGFyc2VkTWVzc2FnZSkuaWQgfHxcclxuICAgICAgICAgICAgKG1lc3NhZ2UgYXMgUGFyc2VkTWVzc2FnZUxlZ2FjeSkubWVzc2FnZUlkLFxyXG4gICAgICAgICAgZGVzYzogbWVzc2FnZS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgIG1lYW5pbmc6IG1lc3NhZ2UubWVhbmluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyBwcmVzZXJ2ZVdoaXRlc3BhY2U6IHRydWUgfVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLnJlbmRlck1lc3NhZ2UoeG1sLCBtZXNzYWdlKTtcclxuICAgICAgeG1sLmVuZFRhZygndHJhbnNsYXRpb24nLCB7IHByZXNlcnZlV2hpdGVzcGFjZTogZmFsc2UgfSk7XHJcbiAgICB9KTtcclxuICAgIHhtbC5lbmRUYWcoJ3RyYW5zbGF0aW9uYnVuZGxlJyk7XHJcbiAgICByZXR1cm4gRE9DVFlQRSArIHhtbC50b1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW5kZXJNZXNzYWdlKFxyXG4gICAgeG1sOiBYbWxGaWxlLFxyXG4gICAgbWVzc2FnZTogybVQYXJzZWRNZXNzYWdlIHwgUGFyc2VkTWVzc2FnZUxlZ2FjeVxyXG4gICk6IHZvaWQge1xyXG4gICAgeG1sLnRleHQobWVzc2FnZS5tZXNzYWdlUGFydHNbMF0pO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBtZXNzYWdlLm1lc3NhZ2VQYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB4bWwuc3RhcnRUYWcoXHJcbiAgICAgICAgJ3BoJyxcclxuICAgICAgICB7IG5hbWU6IG1lc3NhZ2UucGxhY2Vob2xkZXJOYW1lc1tpIC0gMV0gfSxcclxuICAgICAgICB7IHNlbGZDbG9zaW5nOiB0cnVlIH1cclxuICAgICAgKTtcclxuICAgICAgeG1sLnRleHQobWVzc2FnZS5tZXNzYWdlUGFydHNbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=