/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/translation_files/xmb_translation_serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { XmlFile } from './xml_file';
/** @type {?} */
const DOCTYPE = `<!ELEMENT messagebundle (msg)*>
<!ATTLIST messagebundle class CDATA #IMPLIED>

<!ELEMENT msg (#PCDATA|ph|source)*>
<!ATTLIST msg id CDATA #IMPLIED>
<!ATTLIST msg seq CDATA #IMPLIED>
<!ATTLIST msg name CDATA #IMPLIED>
<!ATTLIST msg desc CDATA #IMPLIED>
<!ATTLIST msg meaning CDATA #IMPLIED>
<!ATTLIST msg obsolete (obsolete) #IMPLIED>
<!ATTLIST msg xml:space (default|preserve) "default">
<!ATTLIST msg is_hidden CDATA #IMPLIED>

<!ELEMENT source (#PCDATA)>

<!ELEMENT ph (#PCDATA|ex)*>
<!ATTLIST ph name CDATA #REQUIRED>

<!ELEMENT ex (#PCDATA)>`;
export class XmbTranslationSerializer {
    /**
     * @param {?} messages
     * @return {?}
     */
    renderFile(messages) {
        /** @type {?} */
        const xml = new XmlFile();
        xml.startTag('messagebundle');
        messages.forEach((/**
         * @param {?} message
         * @return {?}
         */
        message => {
            xml.startTag('msg', {
                id: ((/** @type {?} */ (message))).id ||
                    ((/** @type {?} */ (message))).messageId,
                desc: message.description,
                meaning: message.meaning
            }, { preserveWhitespace: true });
            this.renderMessage(xml, message);
            xml.endTag('msg', { preserveWhitespace: false });
        }));
        xml.endTag('messagebundle');
        return xml.toString();
    }
    /**
     * @private
     * @param {?} xml
     * @param {?} message
     * @return {?}
     */
    renderMessage(xml, message) {
        xml.text(message.messageParts[0]);
        for (let i = 1; i < message.messageParts.length; i++) {
            xml.startTag('ph', { name: message.placeholderNames[i - 1] }, { selfClosing: true });
            xml.text(message.messageParts[i]);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1iX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2V4dHJhY3QvdHJhbnNsYXRpb25fZmlsZXMveG1iX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFVQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDOztNQUUvQixPQUFPLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFrQlE7QUFFeEIsTUFBTSxPQUFPLHdCQUF3Qjs7Ozs7SUFDbkMsVUFBVSxDQUFDLFFBQWtEOztjQUNyRCxHQUFHLEdBQUcsSUFBSSxPQUFPLEVBQUU7UUFDekIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM5QixRQUFRLENBQUMsT0FBTzs7OztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCLEdBQUcsQ0FBQyxRQUFRLENBQ1YsS0FBSyxFQUNMO2dCQUNFLEVBQUUsRUFDQSxDQUFDLG1CQUFBLE9BQU8sRUFBa0IsQ0FBQyxDQUFDLEVBQUU7b0JBQzlCLENBQUMsbUJBQUEsT0FBTyxFQUF1QixDQUFDLENBQUMsU0FBUztnQkFDNUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxXQUFXO2dCQUN6QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87YUFDekIsRUFDRCxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUM3QixDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDakMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELENBQUMsRUFBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM1QixPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7Ozs7O0lBRU8sYUFBYSxDQUNuQixHQUFZLEVBQ1osT0FBNkM7UUFFN0MsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BELEdBQUcsQ0FBQyxRQUFRLENBQ1YsSUFBSSxFQUNKLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFDekMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQ3RCLENBQUM7WUFDRixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IMm1UGFyc2VkTWVzc2FnZSB9IGZyb20gJ0Bhbmd1bGFyL2xvY2FsaXplJztcbmltcG9ydCB7IFBhcnNlZE1lc3NhZ2VMZWdhY3kgfSBmcm9tICcuLi8uLi8uLi9jbWRzL2NvbW1vbi91dGlsJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uU2VyaWFsaXplciB9IGZyb20gJy4vdHJhbnNsYXRpb25fc2VyaWFsaXplcic7XG5pbXBvcnQgeyBYbWxGaWxlIH0gZnJvbSAnLi94bWxfZmlsZSc7XG5cbmNvbnN0IERPQ1RZUEUgPSBgPCFFTEVNRU5UIG1lc3NhZ2VidW5kbGUgKG1zZykqPlxuPCFBVFRMSVNUIG1lc3NhZ2VidW5kbGUgY2xhc3MgQ0RBVEEgI0lNUExJRUQ+XG5cbjwhRUxFTUVOVCBtc2cgKCNQQ0RBVEF8cGh8c291cmNlKSo+XG48IUFUVExJU1QgbXNnIGlkIENEQVRBICNJTVBMSUVEPlxuPCFBVFRMSVNUIG1zZyBzZXEgQ0RBVEEgI0lNUExJRUQ+XG48IUFUVExJU1QgbXNnIG5hbWUgQ0RBVEEgI0lNUExJRUQ+XG48IUFUVExJU1QgbXNnIGRlc2MgQ0RBVEEgI0lNUExJRUQ+XG48IUFUVExJU1QgbXNnIG1lYW5pbmcgQ0RBVEEgI0lNUExJRUQ+XG48IUFUVExJU1QgbXNnIG9ic29sZXRlIChvYnNvbGV0ZSkgI0lNUExJRUQ+XG48IUFUVExJU1QgbXNnIHhtbDpzcGFjZSAoZGVmYXVsdHxwcmVzZXJ2ZSkgXCJkZWZhdWx0XCI+XG48IUFUVExJU1QgbXNnIGlzX2hpZGRlbiBDREFUQSAjSU1QTElFRD5cblxuPCFFTEVNRU5UIHNvdXJjZSAoI1BDREFUQSk+XG5cbjwhRUxFTUVOVCBwaCAoI1BDREFUQXxleCkqPlxuPCFBVFRMSVNUIHBoIG5hbWUgQ0RBVEEgI1JFUVVJUkVEPlxuXG48IUVMRU1FTlQgZXggKCNQQ0RBVEEpPmA7XG5cbmV4cG9ydCBjbGFzcyBYbWJUcmFuc2xhdGlvblNlcmlhbGl6ZXIgaW1wbGVtZW50cyBUcmFuc2xhdGlvblNlcmlhbGl6ZXIge1xuICByZW5kZXJGaWxlKG1lc3NhZ2VzOiAoybVQYXJzZWRNZXNzYWdlIHwgUGFyc2VkTWVzc2FnZUxlZ2FjeSlbXSk6IHN0cmluZyB7XG4gICAgY29uc3QgeG1sID0gbmV3IFhtbEZpbGUoKTtcbiAgICB4bWwuc3RhcnRUYWcoJ21lc3NhZ2VidW5kbGUnKTtcbiAgICBtZXNzYWdlcy5mb3JFYWNoKG1lc3NhZ2UgPT4ge1xuICAgICAgeG1sLnN0YXJ0VGFnKFxuICAgICAgICAnbXNnJyxcbiAgICAgICAge1xuICAgICAgICAgIGlkOlxuICAgICAgICAgICAgKG1lc3NhZ2UgYXMgybVQYXJzZWRNZXNzYWdlKS5pZCB8fFxuICAgICAgICAgICAgKG1lc3NhZ2UgYXMgUGFyc2VkTWVzc2FnZUxlZ2FjeSkubWVzc2FnZUlkLFxuICAgICAgICAgIGRlc2M6IG1lc3NhZ2UuZGVzY3JpcHRpb24sXG4gICAgICAgICAgbWVhbmluZzogbWVzc2FnZS5tZWFuaW5nXG4gICAgICAgIH0sXG4gICAgICAgIHsgcHJlc2VydmVXaGl0ZXNwYWNlOiB0cnVlIH1cbiAgICAgICk7XG4gICAgICB0aGlzLnJlbmRlck1lc3NhZ2UoeG1sLCBtZXNzYWdlKTtcbiAgICAgIHhtbC5lbmRUYWcoJ21zZycsIHsgcHJlc2VydmVXaGl0ZXNwYWNlOiBmYWxzZSB9KTtcbiAgICB9KTtcbiAgICB4bWwuZW5kVGFnKCdtZXNzYWdlYnVuZGxlJyk7XG4gICAgcmV0dXJuIHhtbC50b1N0cmluZygpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJNZXNzYWdlKFxuICAgIHhtbDogWG1sRmlsZSxcbiAgICBtZXNzYWdlOiDJtVBhcnNlZE1lc3NhZ2UgfCBQYXJzZWRNZXNzYWdlTGVnYWN5XG4gICk6IHZvaWQge1xuICAgIHhtbC50ZXh0KG1lc3NhZ2UubWVzc2FnZVBhcnRzWzBdKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1lc3NhZ2UubWVzc2FnZVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB4bWwuc3RhcnRUYWcoXG4gICAgICAgICdwaCcsXG4gICAgICAgIHsgbmFtZTogbWVzc2FnZS5wbGFjZWhvbGRlck5hbWVzW2kgLSAxXSB9LFxuICAgICAgICB7IHNlbGZDbG9zaW5nOiB0cnVlIH1cbiAgICAgICk7XG4gICAgICB4bWwudGV4dChtZXNzYWdlLm1lc3NhZ2VQYXJ0c1tpXSk7XG4gICAgfVxuICB9XG59XG4iXX0=