/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/translation_files/xliff1_translation_serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { XmlFile } from './xml_file';
export class Xliff1TranslationSerializer {
    /**
     * @param {?} messages
     * @param {?} locale
     * @param {?=} isTarget
     * @return {?}
     */
    renderFile(messages, locale, isTarget = false) {
        /** @type {?} */
        const xml = new XmlFile();
        xml.startTag('xliff', {
            version: '1.2',
            xmlns: 'urn:oasis:names:tc:xliff:document:1.2'
        });
        /** @type {?} */
        const fileAttrs = {
            ['source-language']: isTarget ? undefined : locale,
            ['target-language']: locale,
            datatype: 'plaintext'
        };
        xml.startTag('file', fileAttrs);
        xml.startTag('body');
        messages.forEach((/**
         * @param {?} message
         * @return {?}
         */
        message => {
            xml.startTag('trans-unit', {
                id: ((/** @type {?} */ (message))).id ||
                    ((/** @type {?} */ (message))).messageId,
                datatype: 'html'
            });
            if (!isTarget) {
                this.generateMessageTag(xml, 'source', message);
            }
            this.generateMessageTag(xml, 'target', message);
            if (message.description) {
                this.renderNote(xml, 'description', message.description);
            }
            if (message.meaning) {
                this.renderNote(xml, 'meaning', message.meaning);
            }
            xml.endTag('trans-unit');
        }));
        xml.endTag('body');
        xml.endTag('file');
        xml.endTag('xliff');
        return xml.toString();
    }
    /**
     * @private
     * @param {?} xml
     * @param {?} tagName
     * @param {?} message
     * @return {?}
     */
    generateMessageTag(xml, tagName, message) {
        xml.startTag(tagName, {}, { preserveWhitespace: true });
        this.renderMessage(xml, message);
        xml.endTag(tagName, { preserveWhitespace: false });
    }
    /**
     * @private
     * @param {?} xml
     * @param {?} message
     * @return {?}
     */
    renderMessage(xml, message) {
        xml.text(message.messageParts[0]);
        for (let i = 1; i < message.messageParts.length; i++) {
            xml.startTag('x', { id: message.placeholderNames[i - 1] }, { selfClosing: true });
            xml.text(message.messageParts[i]);
        }
    }
    /**
     * @private
     * @param {?} xml
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    renderNote(xml, name, value) {
        xml.startTag('note', { priority: '1', from: name }, { preserveWhitespace: true });
        xml.text(value);
        xml.endTag('note', { preserveWhitespace: false });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGxpZmYxX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2V4dHJhY3QvdHJhbnNsYXRpb25fZmlsZXMveGxpZmYxX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFVQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXJDLE1BQU0sT0FBTywyQkFBMkI7Ozs7Ozs7SUFDdEMsVUFBVSxDQUNSLFFBQWtELEVBQ2xELE1BQWMsRUFDZCxRQUFRLEdBQUcsS0FBSzs7Y0FFVixHQUFHLEdBQUcsSUFBSSxPQUFPLEVBQUU7UUFDekIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDcEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxLQUFLLEVBQUUsdUNBQXVDO1NBQy9DLENBQUMsQ0FBQzs7Y0FDRyxTQUFTLEdBQUc7WUFDaEIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNO1lBQ2xELENBQUMsaUJBQWlCLENBQUMsRUFBRSxNQUFNO1lBQzNCLFFBQVEsRUFBRSxXQUFXO1NBQ3RCO1FBQ0QsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQixRQUFRLENBQUMsT0FBTzs7OztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFO2dCQUN6QixFQUFFLEVBQ0EsQ0FBQyxtQkFBQSxPQUFPLEVBQWtCLENBQUMsQ0FBQyxFQUFFO29CQUM5QixDQUFDLG1CQUFBLE9BQU8sRUFBdUIsQ0FBQyxDQUFDLFNBQVM7Z0JBQzVDLFFBQVEsRUFBRSxNQUFNO2FBQ2pCLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDakQ7WUFDRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDMUQ7WUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDbEQ7WUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNCLENBQUMsRUFBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEIsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7Ozs7Ozs7SUFFTyxrQkFBa0IsQ0FDeEIsR0FBWSxFQUNaLE9BQWUsRUFDZixPQUE2QztRQUU3QyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7Ozs7O0lBRU8sYUFBYSxDQUNuQixHQUFZLEVBQ1osT0FBNkM7UUFFN0MsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BELEdBQUcsQ0FBQyxRQUFRLENBQ1YsR0FBRyxFQUNILEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFDdkMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQ3RCLENBQUM7WUFDRixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7Ozs7O0lBRU8sVUFBVSxDQUFDLEdBQVksRUFBRSxJQUFZLEVBQUUsS0FBYTtRQUMxRCxHQUFHLENBQUMsUUFBUSxDQUNWLE1BQU0sRUFDTixFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUM3QixFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUM3QixDQUFDO1FBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXHJcbiAqL1xyXG5pbXBvcnQgeyDJtVBhcnNlZE1lc3NhZ2UgfSBmcm9tICdAYW5ndWxhci9sb2NhbGl6ZSc7XHJcbmltcG9ydCB7IFBhcnNlZE1lc3NhZ2VMZWdhY3kgfSBmcm9tICcuLi8uLi8uLi9jbWRzL2NvbW1vbi91dGlsJztcclxuaW1wb3J0IHsgVHJhbnNsYXRpb25TZXJpYWxpemVyIH0gZnJvbSAnLi90cmFuc2xhdGlvbl9zZXJpYWxpemVyJztcclxuaW1wb3J0IHsgWG1sRmlsZSB9IGZyb20gJy4veG1sX2ZpbGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFhsaWZmMVRyYW5zbGF0aW9uU2VyaWFsaXplciBpbXBsZW1lbnRzIFRyYW5zbGF0aW9uU2VyaWFsaXplciB7XHJcbiAgcmVuZGVyRmlsZShcclxuICAgIG1lc3NhZ2VzOiAoybVQYXJzZWRNZXNzYWdlIHwgUGFyc2VkTWVzc2FnZUxlZ2FjeSlbXSxcclxuICAgIGxvY2FsZTogc3RyaW5nLFxyXG4gICAgaXNUYXJnZXQgPSBmYWxzZVxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBjb25zdCB4bWwgPSBuZXcgWG1sRmlsZSgpO1xyXG4gICAgeG1sLnN0YXJ0VGFnKCd4bGlmZicsIHtcclxuICAgICAgdmVyc2lvbjogJzEuMicsXHJcbiAgICAgIHhtbG5zOiAndXJuOm9hc2lzOm5hbWVzOnRjOnhsaWZmOmRvY3VtZW50OjEuMidcclxuICAgIH0pO1xyXG4gICAgY29uc3QgZmlsZUF0dHJzID0ge1xyXG4gICAgICBbJ3NvdXJjZS1sYW5ndWFnZSddOiBpc1RhcmdldCA/IHVuZGVmaW5lZCA6IGxvY2FsZSxcclxuICAgICAgWyd0YXJnZXQtbGFuZ3VhZ2UnXTogbG9jYWxlLFxyXG4gICAgICBkYXRhdHlwZTogJ3BsYWludGV4dCdcclxuICAgIH07XHJcbiAgICB4bWwuc3RhcnRUYWcoJ2ZpbGUnLCBmaWxlQXR0cnMpO1xyXG4gICAgeG1sLnN0YXJ0VGFnKCdib2R5Jyk7XHJcbiAgICBtZXNzYWdlcy5mb3JFYWNoKG1lc3NhZ2UgPT4ge1xyXG4gICAgICB4bWwuc3RhcnRUYWcoJ3RyYW5zLXVuaXQnLCB7XHJcbiAgICAgICAgaWQ6XHJcbiAgICAgICAgICAobWVzc2FnZSBhcyDJtVBhcnNlZE1lc3NhZ2UpLmlkIHx8XHJcbiAgICAgICAgICAobWVzc2FnZSBhcyBQYXJzZWRNZXNzYWdlTGVnYWN5KS5tZXNzYWdlSWQsXHJcbiAgICAgICAgZGF0YXR5cGU6ICdodG1sJ1xyXG4gICAgICB9KTtcclxuICAgICAgaWYgKCFpc1RhcmdldCkge1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVNZXNzYWdlVGFnKHhtbCwgJ3NvdXJjZScsIG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZ2VuZXJhdGVNZXNzYWdlVGFnKHhtbCwgJ3RhcmdldCcsIG1lc3NhZ2UpO1xyXG4gICAgICBpZiAobWVzc2FnZS5kZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMucmVuZGVyTm90ZSh4bWwsICdkZXNjcmlwdGlvbicsIG1lc3NhZ2UuZGVzY3JpcHRpb24pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChtZXNzYWdlLm1lYW5pbmcpIHtcclxuICAgICAgICB0aGlzLnJlbmRlck5vdGUoeG1sLCAnbWVhbmluZycsIG1lc3NhZ2UubWVhbmluZyk7XHJcbiAgICAgIH1cclxuICAgICAgeG1sLmVuZFRhZygndHJhbnMtdW5pdCcpO1xyXG4gICAgfSk7XHJcbiAgICB4bWwuZW5kVGFnKCdib2R5Jyk7XHJcbiAgICB4bWwuZW5kVGFnKCdmaWxlJyk7XHJcbiAgICB4bWwuZW5kVGFnKCd4bGlmZicpO1xyXG4gICAgcmV0dXJuIHhtbC50b1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZW5lcmF0ZU1lc3NhZ2VUYWcoXHJcbiAgICB4bWw6IFhtbEZpbGUsXHJcbiAgICB0YWdOYW1lOiBzdHJpbmcsXHJcbiAgICBtZXNzYWdlOiDJtVBhcnNlZE1lc3NhZ2UgfCBQYXJzZWRNZXNzYWdlTGVnYWN5XHJcbiAgKSB7XHJcbiAgICB4bWwuc3RhcnRUYWcodGFnTmFtZSwge30sIHsgcHJlc2VydmVXaGl0ZXNwYWNlOiB0cnVlIH0pO1xyXG4gICAgdGhpcy5yZW5kZXJNZXNzYWdlKHhtbCwgbWVzc2FnZSk7XHJcbiAgICB4bWwuZW5kVGFnKHRhZ05hbWUsIHsgcHJlc2VydmVXaGl0ZXNwYWNlOiBmYWxzZSB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyTWVzc2FnZShcclxuICAgIHhtbDogWG1sRmlsZSxcclxuICAgIG1lc3NhZ2U6IMm1UGFyc2VkTWVzc2FnZSB8IFBhcnNlZE1lc3NhZ2VMZWdhY3lcclxuICApOiB2b2lkIHtcclxuICAgIHhtbC50ZXh0KG1lc3NhZ2UubWVzc2FnZVBhcnRzWzBdKTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbWVzc2FnZS5tZXNzYWdlUGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgeG1sLnN0YXJ0VGFnKFxyXG4gICAgICAgICd4JyxcclxuICAgICAgICB7IGlkOiBtZXNzYWdlLnBsYWNlaG9sZGVyTmFtZXNbaSAtIDFdIH0sXHJcbiAgICAgICAgeyBzZWxmQ2xvc2luZzogdHJ1ZSB9XHJcbiAgICAgICk7XHJcbiAgICAgIHhtbC50ZXh0KG1lc3NhZ2UubWVzc2FnZVBhcnRzW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyTm90ZSh4bWw6IFhtbEZpbGUsIG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgeG1sLnN0YXJ0VGFnKFxyXG4gICAgICAnbm90ZScsXHJcbiAgICAgIHsgcHJpb3JpdHk6ICcxJywgZnJvbTogbmFtZSB9LFxyXG4gICAgICB7IHByZXNlcnZlV2hpdGVzcGFjZTogdHJ1ZSB9XHJcbiAgICApO1xyXG4gICAgeG1sLnRleHQodmFsdWUpO1xyXG4gICAgeG1sLmVuZFRhZygnbm90ZScsIHsgcHJlc2VydmVXaGl0ZXNwYWNlOiBmYWxzZSB9KTtcclxuICB9XHJcbn1cclxuIl19