/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/translation_files/xml_file.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @record
 */
function Options() { }
if (false) {
    /** @type {?|undefined} */
    Options.prototype.selfClosing;
    /** @type {?|undefined} */
    Options.prototype.preserveWhitespace;
}
export class XmlFile {
    constructor() {
        this.output = '';
        this.indent = '';
        this.elements = [];
        this.preservingWhitespace = false;
    }
    /**
     * @return {?}
     */
    toString() {
        return this.output;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @param {?=} attributes
     * @param {?=} __2
     * @return {THIS}
     */
    startTag(name, attributes = {}, { selfClosing = false, preserveWhitespace } = {}) {
        if (!(/** @type {?} */ (this)).preservingWhitespace) {
            (/** @type {?} */ (this)).output += (/** @type {?} */ (this)).indent;
        }
        (/** @type {?} */ (this)).output += `<${name}`;
        Object.keys(attributes).forEach((/**
         * @param {?} attrName
         * @return {?}
         */
        attrName => {
            if (attributes[attrName]) {
                (/** @type {?} */ (this)).output += ` ${attrName}="${escapeXml(attributes[attrName])}"`;
            }
        }));
        if (selfClosing) {
            (/** @type {?} */ (this)).output += '/>';
        }
        else {
            (/** @type {?} */ (this)).output += '>';
            (/** @type {?} */ (this)).elements.push(name);
            (/** @type {?} */ (this)).incIndent();
        }
        if (preserveWhitespace !== undefined) {
            (/** @type {?} */ (this)).preservingWhitespace = preserveWhitespace;
        }
        if (!(/** @type {?} */ (this)).preservingWhitespace) {
            (/** @type {?} */ (this)).output += `\n`;
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @param {?=} __1
     * @return {THIS}
     */
    endTag(name, { preserveWhitespace } = {}) {
        /** @type {?} */
        const expectedTag = (/** @type {?} */ (this)).elements.pop();
        if (expectedTag !== name) {
            throw new Error(`Unexpected closing tag: "${name}", expected: "${expectedTag}"`);
        }
        (/** @type {?} */ (this)).decIndent();
        if (!(/** @type {?} */ (this)).preservingWhitespace) {
            (/** @type {?} */ (this)).output += (/** @type {?} */ (this)).indent;
        }
        (/** @type {?} */ (this)).output += `</${name}>`;
        if (preserveWhitespace !== undefined) {
            (/** @type {?} */ (this)).preservingWhitespace = preserveWhitespace;
        }
        if (!(/** @type {?} */ (this)).preservingWhitespace) {
            (/** @type {?} */ (this)).output += `\n`;
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} str
     * @return {THIS}
     */
    text(str) {
        (/** @type {?} */ (this)).output += escapeXml(str);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    startPreserveWhitespace() {
        this.preservingWhitespace = true;
    }
    /**
     * @return {?}
     */
    stopPreserveWhitespace() {
        this.preservingWhitespace = false;
    }
    /**
     * @private
     * @return {?}
     */
    incIndent() {
        this.indent = this.indent + '  ';
    }
    /**
     * @private
     * @return {?}
     */
    decIndent() {
        this.indent = this.indent.slice(0, -2);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    XmlFile.prototype.output;
    /**
     * @type {?}
     * @private
     */
    XmlFile.prototype.indent;
    /**
     * @type {?}
     * @private
     */
    XmlFile.prototype.elements;
    /**
     * @type {?}
     * @private
     */
    XmlFile.prototype.preservingWhitespace;
}
/** @type {?} */
const _ESCAPED_CHARS = [
    [/&/g, '&amp;'],
    [/"/g, '&quot;'],
    [/'/g, '&apos;'],
    [/</g, '&lt;'],
    [/>/g, '&gt;']
];
/**
 * @param {?} text
 * @return {?}
 */
function escapeXml(text) {
    return _ESCAPED_CHARS.reduce((/**
     * @param {?} t
     * @param {?} entry
     * @return {?}
     */
    (t, entry) => t.replace(entry[0], entry[1])), text);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sX2ZpbGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2V4dHJhY3QvdHJhbnNsYXRpb25fZmlsZXMveG1sX2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBUUEsc0JBR0M7OztJQUZDLDhCQUFzQjs7SUFDdEIscUNBQTZCOztBQUcvQixNQUFNLE9BQU8sT0FBTztJQUFwQjtRQUNVLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFDWixXQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ1osYUFBUSxHQUFhLEVBQUUsQ0FBQztRQUN4Qix5QkFBb0IsR0FBRyxLQUFLLENBQUM7SUFpRnZDLENBQUM7Ozs7SUFoRkMsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7Ozs7Ozs7SUFFRCxRQUFRLENBQ04sSUFBWSxFQUNaLGFBQXFDLEVBQUUsRUFDdkMsRUFBRSxXQUFXLEdBQUcsS0FBSyxFQUFFLGtCQUFrQixLQUFjLEVBQUU7UUFFekQsSUFBSSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLG9CQUFvQixFQUFFO1lBQzlCLG1CQUFBLElBQUksRUFBQSxDQUFDLE1BQU0sSUFBSSxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxNQUFNLENBQUM7U0FDNUI7UUFFRCxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUUxQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxRQUFRLENBQUMsRUFBRTtZQUN6QyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDeEIsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxJQUFJLElBQUksUUFBUSxLQUFLLFNBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDO2FBQ3BFO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFF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LElBQUksRUFBRSxNQUFNLENBQUM7Q0FDZjs7Ozs7QUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUFZO0lBQzdCLE9BQU8sY0FBYyxDQUFDLE1BQU07Ozs7O0lBQzFCLENBQUMsQ0FBUyxFQUFFLEtBQXVCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUNyRSxJQUFJLENBQ0wsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmludGVyZmFjZSBPcHRpb25zIHtcbiAgc2VsZkNsb3Npbmc/OiBib29sZWFuO1xuICBwcmVzZXJ2ZVdoaXRlc3BhY2U/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgWG1sRmlsZSB7XG4gIHByaXZhdGUgb3V0cHV0ID0gJyc7XG4gIHByaXZhdGUgaW5kZW50ID0gJyc7XG4gIHByaXZhdGUgZWxlbWVudHM6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgcHJlc2VydmluZ1doaXRlc3BhY2UgPSBmYWxzZTtcbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMub3V0cHV0O1xuICB9XG5cbiAgc3RhcnRUYWcoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGF0dHJpYnV0ZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fSxcbiAgICB7IHNlbGZDbG9zaW5nID0gZmFsc2UsIHByZXNlcnZlV2hpdGVzcGFjZSB9OiBPcHRpb25zID0ge31cbiAgKTogdGhpcyB7XG4gICAgaWYgKCF0aGlzLnByZXNlcnZpbmdXaGl0ZXNwYWNlKSB7XG4gICAgICB0aGlzLm91dHB1dCArPSB0aGlzLmluZGVudDtcbiAgICB9XG5cbiAgICB0aGlzLm91dHB1dCArPSBgPCR7bmFtZX1gO1xuXG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChhdHRyTmFtZSA9PiB7XG4gICAgICBpZiAoYXR0cmlidXRlc1thdHRyTmFtZV0pIHtcbiAgICAgICAgdGhpcy5vdXRwdXQgKz0gYCAke2F0dHJOYW1lfT1cIiR7ZXNjYXBlWG1sKGF0dHJpYnV0ZXNbYXR0ck5hbWVdKX1cImA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoc2VsZkNsb3NpbmcpIHtcbiAgICAgIHRoaXMub3V0cHV0ICs9ICcvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3V0cHV0ICs9ICc+JztcbiAgICAgIHRoaXMuZWxlbWVudHMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuaW5jSW5kZW50KCk7XG4gICAgfVxuXG4gICAgaWYgKHByZXNlcnZlV2hpdGVzcGFjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnByZXNlcnZpbmdXaGl0ZXNwYWNlID0gcHJlc2VydmVXaGl0ZXNwYWNlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucHJlc2VydmluZ1doaXRlc3BhY2UpIHtcbiAgICAgIHRoaXMub3V0cHV0ICs9IGBcXG5gO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGVuZFRhZyhuYW1lOiBzdHJpbmcsIHsgcHJlc2VydmVXaGl0ZXNwYWNlIH06IE9wdGlvbnMgPSB7fSk6IHRoaXMge1xuICAgIGNvbnN0IGV4cGVjdGVkVGFnID0gdGhpcy5lbGVtZW50cy5wb3AoKTtcbiAgICBpZiAoZXhwZWN0ZWRUYWcgIT09IG5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFVuZXhwZWN0ZWQgY2xvc2luZyB0YWc6IFwiJHtuYW1lfVwiLCBleHBlY3RlZDogXCIke2V4cGVjdGVkVGFnfVwiYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmRlY0luZGVudCgpO1xuXG4gICAgaWYgKCF0aGlzLnByZXNlcnZpbmdXaGl0ZXNwYWNlKSB7XG4gICAgICB0aGlzLm91dHB1dCArPSB0aGlzLmluZGVudDtcbiAgICB9XG4gICAgdGhpcy5vdXRwdXQgKz0gYDwvJHtuYW1lfT5gO1xuXG4gICAgaWYgKHByZXNlcnZlV2hpdGVzcGFjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnByZXNlcnZpbmdXaGl0ZXNwYWNlID0gcHJlc2VydmVXaGl0ZXNwYWNlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucHJlc2VydmluZ1doaXRlc3BhY2UpIHtcbiAgICAgIHRoaXMub3V0cHV0ICs9IGBcXG5gO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRleHQoc3RyOiBzdHJpbmcpOiB0aGlzIHtcbiAgICB0aGlzLm91dHB1dCArPSBlc2NhcGVYbWwoc3RyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN0YXJ0UHJlc2VydmVXaGl0ZXNwYWNlKCkge1xuICAgIHRoaXMucHJlc2VydmluZ1doaXRlc3BhY2UgPSB0cnVlO1xuICB9XG4gIHN0b3BQcmVzZXJ2ZVdoaXRlc3BhY2UoKSB7XG4gICAgdGhpcy5wcmVzZXJ2aW5nV2hpdGVzcGFjZSA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBpbmNJbmRlbnQoKSB7XG4gICAgdGhpcy5pbmRlbnQgPSB0aGlzLmluZGVudCArICcgICc7XG4gIH1cbiAgcHJpdmF0ZSBkZWNJbmRlbnQoKSB7XG4gICAgdGhpcy5pbmRlbnQgPSB0aGlzLmluZGVudC5zbGljZSgwLCAtMik7XG4gIH1cbn1cblxuY29uc3QgX0VTQ0FQRURfQ0hBUlM6IFtSZWdFeHAsIHN0cmluZ11bXSA9IFtcbiAgWy8mL2csICcmYW1wOyddLFxuICBbL1wiL2csICcmcXVvdDsnXSxcbiAgWy8nL2csICcmYXBvczsnXSxcbiAgWy88L2csICcmbHQ7J10sXG4gIFsvPi9nLCAnJmd0OyddXG5dO1xuXG5mdW5jdGlvbiBlc2NhcGVYbWwodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIF9FU0NBUEVEX0NIQVJTLnJlZHVjZShcbiAgICAodDogc3RyaW5nLCBlbnRyeTogW1JlZ0V4cCwgc3RyaW5nXSkgPT4gdC5yZXBsYWNlKGVudHJ5WzBdLCBlbnRyeVsxXSksXG4gICAgdGV4dFxuICApO1xufVxuIl19