/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { readFileSync, statSync } from 'fs';
import { sync } from 'glob';
import { basename, extname, posix, resolve } from 'path';
import { Diagnostics } from './common/diagnostics';
import { FileUtils } from './common/file_utils';
import { getExtension, getTranslationSerializer } from './common/util';
import { Extractor } from './extract/extractor';
/** @type {?} */
export const command = 'extract';
/** @type {?} */
export const describe = 'Extract translations from your ivy application';
/** @type {?} */
export const builder = {
    s: {
        alias: 'source',
        required: true,
        describe: 'A glob pattern indicating what files to search for translations, e.g. `./dist/**/*.js`. This can be absolute or relative to the current working directory.'
    },
    f: {
        alias: 'format',
        required: true,
        describe: 'The format of the translation files to generate.',
        choices: ['json', 'xlf', 'xmb', 'xlf2'],
        default: 'json'
    },
    o: {
        alias: 'outputPath',
        required: true,
        describe: 'A path to where the translation file will be written. This can be absolute or relative to the current working directory.'
    },
    l: {
        alias: ['locale', 'locales'],
        required: false,
        type: 'array',
        describe: 'The locale for the extracted file, "en" by default. If you use multiple locales (e.g. "en fr es"), a new file will be generated for each locale'
    }
};
/** @type {?} */
export const handler = (/**
 * @param {?} options
 * @return {?}
 */
function (options) {
    /** @type {?} */
    const diagnostics = new Diagnostics();
    extractTranslations({
        sourceGlob: (/** @type {?} */ (options['s'])),
        format: (/** @type {?} */ (options['f'])),
        outputPath: (/** @type {?} */ (options['o'])),
        locales: (/** @type {?} */ (options['l'])),
        diagnostics
    });
    diagnostics.logMessages();
    process.exit(diagnostics.hasErrors ? 1 : 0);
});
/**
 * @record
 */
export function ExtractTranslationsOptions() { }
if (false) {
    /** @type {?} */
    ExtractTranslationsOptions.prototype.sourceGlob;
    /** @type {?} */
    ExtractTranslationsOptions.prototype.format;
    /** @type {?} */
    ExtractTranslationsOptions.prototype.outputPath;
    /** @type {?|undefined} */
    ExtractTranslationsOptions.prototype.locales;
    /** @type {?} */
    ExtractTranslationsOptions.prototype.diagnostics;
}
/**
 * @param {?} __0
 * @return {?}
 */
export function extractTranslations({ sourceGlob: source, format, outputPath: output, locales = ['en'], diagnostics }) {
    console.log(`Extracting translations from "${source}"`);
    /** @type {?} */
    let filesToProcess = sync(resolve(source), {
        absolute: true,
        nodir: true
    });
    filesToProcess = FileUtils.dedup(filesToProcess, /\-es(5|2015)\./, '.');
    output = resolve(output);
    /** @type {?} */
    const generatedFiles = [];
    /** @type {?} */
    let isFile;
    try {
        /** @type {?} */
        const stat = statSync(output);
        isFile = stat.isFile();
    }
    catch (e) {
        isFile = !!extname(output);
    }
    if (isFile) {
        if (locales.length > 1) {
            diagnostics.error(`Multiple locales detected ("${locales.join(',')}") but output "${output}" is not a directory`);
            return;
        }
        /** @type {?} */
        const res = makeTranslationsFile(filesToProcess, posix.normalize(output), source, format, locales[0], diagnostics);
        if (res) {
            generatedFiles.push(res);
        }
    }
    else {
        filesToProcess.forEach((/**
         * @param {?} file
         * @return {?}
         */
        file => {
            locales.forEach((/**
             * @param {?} locale
             * @return {?}
             */
            locale => {
                /** @type {?} */
                const newFileName = posix.join(output, basename(file, '.js').replace(/-es(5|2015)/, '') +
                    '.' +
                    locale +
                    '.' +
                    getExtension(format));
                /** @type {?} */
                const res = makeTranslationsFile([file], newFileName, source, format, locale, diagnostics);
                if (res) {
                    generatedFiles.push(res);
                }
            }));
        }));
    }
    if (!generatedFiles.length) {
        diagnostics.error(`No messages found. You should build the angular app without a language target for this command to work.`);
        return;
    }
}
/**
 * @param {?} filesToProcess
 * @param {?} fileOutput
 * @param {?} source
 * @param {?} format
 * @param {?} locale
 * @param {?} diagnostics
 * @return {?}
 */
function makeTranslationsFile(filesToProcess, fileOutput, source, format, locale, diagnostics) {
    /** @type {?} */
    const extractor = new Extractor(diagnostics);
    filesToProcess.forEach((/**
     * @param {?} file
     * @return {?}
     */
    file => {
        /** @type {?} */
        const contents = readFileSync(file, 'utf8');
        extractor.extractMessages(contents);
    }));
    /** @type {?} */
    const serializer = getTranslationSerializer(format);
    if (extractor.messages.length > 0) {
        /** @type {?} */
        const translationFile = serializer.renderFile(extractor.messages, locale, false);
        FileUtils.writeFile(fileOutput, translationFile);
        console.log(`  Generated file "${fileOutput}"`);
        return fileOutput;
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,