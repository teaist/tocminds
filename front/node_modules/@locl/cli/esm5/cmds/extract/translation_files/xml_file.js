/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/translation_files/xml_file.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @record
 */
function Options() { }
if (false) {
    /** @type {?|undefined} */
    Options.prototype.selfClosing;
    /** @type {?|undefined} */
    Options.prototype.preserveWhitespace;
}
var XmlFile = /** @class */ (function () {
    function XmlFile() {
        this.output = '';
        this.indent = '';
        this.elements = [];
        this.preservingWhitespace = false;
    }
    /**
     * @return {?}
     */
    XmlFile.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.output;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @param {?=} attributes
     * @param {?=} __2
     * @return {THIS}
     */
    XmlFile.prototype.startTag = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @param {?=} attributes
     * @param {?=} __2
     * @return {THIS}
     */
    function (name, attributes, _a) {
        var _this = this;
        if (attributes === void 0) { attributes = {}; }
        var _b = _a === void 0 ? {} : _a, _c = _b.selfClosing, selfClosing = _c === void 0 ? false : _c, preserveWhitespace = _b.preserveWhitespace;
        if (!(/** @type {?} */ (this)).preservingWhitespace) {
            (/** @type {?} */ (this)).output += (/** @type {?} */ (this)).indent;
        }
        (/** @type {?} */ (this)).output += "<" + name;
        Object.keys(attributes).forEach((/**
         * @param {?} attrName
         * @return {?}
         */
        function (attrName) {
            if (attributes[attrName]) {
                (/** @type {?} */ (_this)).output += " " + attrName + "=\"" + escapeXml(attributes[attrName]) + "\"";
            }
        }));
        if (selfClosing) {
            (/** @type {?} */ (this)).output += '/>';
        }
        else {
            (/** @type {?} */ (this)).output += '>';
            (/** @type {?} */ (this)).elements.push(name);
            (/** @type {?} */ (this)).incIndent();
        }
        if (preserveWhitespace !== undefined) {
            (/** @type {?} */ (this)).preservingWhitespace = preserveWhitespace;
        }
        if (!(/** @type {?} */ (this)).preservingWhitespace) {
            (/** @type {?} */ (this)).output += "\n";
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @param {?=} __1
     * @return {THIS}
     */
    XmlFile.prototype.endTag = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @param {?=} __1
     * @return {THIS}
     */
    function (name, _a) {
        var preserveWhitespace = (_a === void 0 ? {} : _a).preserveWhitespace;
        /** @type {?} */
        var expectedTag = (/** @type {?} */ (this)).elements.pop();
        if (expectedTag !== name) {
            throw new Error("Unexpected closing tag: \"" + name + "\", expected: \"" + expectedTag + "\"");
        }
        (/** @type {?} */ (this)).decIndent();
        if (!(/** @type {?} */ (this)).preservingWhitespace) {
            (/** @type {?} */ (this)).output += (/** @type {?} */ (this)).indent;
        }
        (/** @type {?} */ (this)).output += "</" + name + ">";
        if (preserveWhitespace !== undefined) {
            (/** @type {?} */ (this)).preservingWhitespace = preserveWhitespace;
        }
        if (!(/** @type {?} */ (this)).preservingWhitespace) {
            (/** @type {?} */ (this)).output += "\n";
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} str
     * @return {THIS}
     */
    XmlFile.prototype.text = /**
     * @template THIS
     * @this {THIS}
     * @param {?} str
     * @return {THIS}
     */
    function (str) {
        (/** @type {?} */ (this)).output += escapeXml(str);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    XmlFile.prototype.startPreserveWhitespace = /**
     * @return {?}
     */
    function () {
        this.preservingWhitespace = true;
    };
    /**
     * @return {?}
     */
    XmlFile.prototype.stopPreserveWhitespace = /**
     * @return {?}
     */
    function () {
        this.preservingWhitespace = false;
    };
    /**
     * @private
     * @return {?}
     */
    XmlFile.prototype.incIndent = /**
     * @private
     * @return {?}
     */
    function () {
        this.indent = this.indent + '  ';
    };
    /**
     * @private
     * @return {?}
     */
    XmlFile.prototype.decIndent = /**
     * @private
     * @return {?}
     */
    function () {
        this.indent = this.indent.slice(0, -2);
    };
    return XmlFile;
}());
export { XmlFile };
if (false) {
    /**
     * @type {?}
     * @private
     */
    XmlFile.prototype.output;
    /**
     * @type {?}
     * @private
     */
    XmlFile.prototype.indent;
    /**
     * @type {?}
     * @private
     */
    XmlFile.prototype.elements;
    /**
     * @type {?}
     * @private
     */
    XmlFile.prototype.preservingWhitespace;
}
/** @type {?} */
var _ESCAPED_CHARS = [
    [/&/g, '&amp;'],
    [/"/g, '&quot;'],
    [/'/g, '&apos;'],
    [/</g, '&lt;'],
    [/>/g, '&gt;']
];
/**
 * @param {?} text
 * @return {?}
 */
function escapeXml(text) {
    return _ESCAPED_CHARS.reduce((/**
     * @param {?} t
     * @param {?} entry
     * @return {?}
     */
    function (t, entry) { return t.replace(entry[0], entry[1]); }), text);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sX2ZpbGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2V4dHJhY3QvdHJhbnNsYXRpb25fZmlsZXMveG1sX2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBUUEsc0JBR0M7OztJQUZDLDhCQUFzQjs7SUFDdEIscUNBQTZCOztBQUcvQjtJQUFBO1FBQ1UsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUNaLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFDWixhQUFRLEdBQWEsRUFBRSxDQUFDO1FBQ3hCLHlCQUFvQixHQUFHLEtBQUssQ0FBQztJQWlGdkMsQ0FBQzs7OztJQWhGQywwQkFBUTs7O0lBQVI7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7Ozs7O0lBRUQsMEJBQVE7Ozs7Ozs7O0lBQVIsVUFDRSxJQUFZLEVBQ1osVUFBdUMsRUFDdkMsRUFBeUQ7UUFIM0QsaUJBZ0NDO1FBOUJDLDJCQUFBLEVBQUEsZUFBdUM7WUFDdkMsNEJBQXlELEVBQXZELG1CQUFtQixFQUFuQix3Q0FBbUIsRUFBRSwwQ0FBa0I7UUFFekMsSUFBSSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLG9CQUFvQixFQUFFO1lBQzlCLG1CQUFBLElBQUksRUFBQSxDQUFDLE1BQU0sSUFBSSxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxNQUFNLENBQUM7U0FDNUI7UUFFRCxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxNQUFNLElBQUksTUFBSSxJQUFNLENBQUM7UUFFMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxRQUFRO1lBQ3RDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN4QixtQkFBQSxLQUFJLEVBQUEsQ0FBQyxNQUFNLElBQUksTUFBSSxRQUFRLFdBQUssU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFHLENBQUM7YUFDcEU7UUFDSCxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksV0FBVyxFQUFFO1lBQ2YsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztTQUNyQjthQUFNO1lBQ0wsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztZQUNuQixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLG1CQUFBLElBQUksRUFBQSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7WUFDcEMsbUJBQUEsSUFBSSxFQUFBLENBQUMsb0JBQW9CLEdBQUcsa0JBQWtCLENBQUM7U0FDaEQ7UUFDRCxJQUFJLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsb0JBQW9CLEVBQUU7WUFDOUIsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztTQUNyQjtRQUNELE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDOzs7Ozs7OztJQUVELHdCQUFNOzs7Ozs7O0lBQU4sVUFBTyxJQUFZLEVBQUUsRUFBb0M7WUFBbEMsaUVBQWtCOztZQUNqQyxXQUFXLEdBQUcsbUJBQUEsSUFBSSxFQUFBLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtRQUN2QyxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FDYiwrQkFBNEIsSUFBSSx3QkFBaUIsV0FBVyxPQUFHLENBQ2hFLENBQUM7U0FDSDtRQUVELG1CQUFBLElBQUksRUFBQSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWpCLElBQUksQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxvQkFBb0IsRUFBRTtZQUM5QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxNQUFNLElBQUksbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxDQUFDO1NBQzVCO1FBQ0QsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxJQUFJLE9BQUssSUFBSSxNQUFHLENBQUM7UUFFNUIsSUFBSSxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7WUFDcEMsbUJBQUEsSUFBSSxFQUFBLENBQUMsb0JBQW9CLEdBQUcsa0JBQWtCLENBQUM7U0FDaEQ7UUFDRCxJQUFJLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsb0JBQW9CLEVBQUU7WUFDOUIsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztTQUNyQjtRQUNELE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDOzs7Ozs7O0lBRUQsc0JBQUk7Ozs7OztJQUFKLFVBQUssR0FBVztRQUNkLG1CQUFBLElBQUksRUFBQSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNkLENBQUM7Ozs7SUFFRCx5Q0FBdUI7OztJQUF2QjtRQUNFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUM7SUFDbkMsQ0FBQzs7OztJQUNELHdDQUFzQjs7O0lBQXRCO1FBQ0UsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQztJQUNwQyxDQUFDOzs7OztJQUVPLDJCQUFTOzs7O0lBQWpCO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNuQyxDQUFDOzs7OztJQUNPLDJCQUFTOzs7O0lBQWpCO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ0gsY0FBQztBQUFELENBQUMsQUFyRkQsSUFxRkM7Ozs7Ozs7SUFwRkMseUJBQW9COzs7OztJQUNwQix5QkFBb0I7Ozs7O0lBQ3BCLDJCQUFnQzs7Ozs7SUFDaEMsdUNBQXFDOzs7SUFtRmpDLGNBQWMsR0FBdUI7SUFDekMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO0lBQ2YsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO0lBQ2hCLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztJQUNoQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7SUFDZCxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7Q0FDZjs7Ozs7QUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUFZO0lBQzdCLE9BQU8sY0FBYyxDQUFDLE1BQU07Ozs7O0lBQzFCLFVBQUMsQ0FBUyxFQUFFLEtBQXVCLElBQUssT0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBN0IsQ0FBNkIsR0FDckUsSUFBSSxDQUNMLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbnRlcmZhY2UgT3B0aW9ucyB7XG4gIHNlbGZDbG9zaW5nPzogYm9vbGVhbjtcbiAgcHJlc2VydmVXaGl0ZXNwYWNlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFhtbEZpbGUge1xuICBwcml2YXRlIG91dHB1dCA9ICcnO1xuICBwcml2YXRlIGluZGVudCA9ICcnO1xuICBwcml2YXRlIGVsZW1lbnRzOiBzdHJpbmdbXSA9IFtdO1xuICBwcml2YXRlIHByZXNlcnZpbmdXaGl0ZXNwYWNlID0gZmFsc2U7XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm91dHB1dDtcbiAgfVxuXG4gIHN0YXJ0VGFnKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBhdHRyaWJ1dGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge30sXG4gICAgeyBzZWxmQ2xvc2luZyA9IGZhbHNlLCBwcmVzZXJ2ZVdoaXRlc3BhY2UgfTogT3B0aW9ucyA9IHt9XG4gICk6IHRoaXMge1xuICAgIGlmICghdGhpcy5wcmVzZXJ2aW5nV2hpdGVzcGFjZSkge1xuICAgICAgdGhpcy5vdXRwdXQgKz0gdGhpcy5pbmRlbnQ7XG4gICAgfVxuXG4gICAgdGhpcy5vdXRwdXQgKz0gYDwke25hbWV9YDtcblxuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goYXR0ck5hbWUgPT4ge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNbYXR0ck5hbWVdKSB7XG4gICAgICAgIHRoaXMub3V0cHV0ICs9IGAgJHthdHRyTmFtZX09XCIke2VzY2FwZVhtbChhdHRyaWJ1dGVzW2F0dHJOYW1lXSl9XCJgO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHNlbGZDbG9zaW5nKSB7XG4gICAgICB0aGlzLm91dHB1dCArPSAnLz4nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm91dHB1dCArPSAnPic7XG4gICAgICB0aGlzLmVsZW1lbnRzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLmluY0luZGVudCgpO1xuICAgIH1cblxuICAgIGlmIChwcmVzZXJ2ZVdoaXRlc3BhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wcmVzZXJ2aW5nV2hpdGVzcGFjZSA9IHByZXNlcnZlV2hpdGVzcGFjZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnByZXNlcnZpbmdXaGl0ZXNwYWNlKSB7XG4gICAgICB0aGlzLm91dHB1dCArPSBgXFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBlbmRUYWcobmFtZTogc3RyaW5nLCB7IHByZXNlcnZlV2hpdGVzcGFjZSB9OiBPcHRpb25zID0ge30pOiB0aGlzIHtcbiAgICBjb25zdCBleHBlY3RlZFRhZyA9IHRoaXMuZWxlbWVudHMucG9wKCk7XG4gICAgaWYgKGV4cGVjdGVkVGFnICE9PSBuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBVbmV4cGVjdGVkIGNsb3NpbmcgdGFnOiBcIiR7bmFtZX1cIiwgZXhwZWN0ZWQ6IFwiJHtleHBlY3RlZFRhZ31cImBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5kZWNJbmRlbnQoKTtcblxuICAgIGlmICghdGhpcy5wcmVzZXJ2aW5nV2hpdGVzcGFjZSkge1xuICAgICAgdGhpcy5vdXRwdXQgKz0gdGhpcy5pbmRlbnQ7XG4gICAgfVxuICAgIHRoaXMub3V0cHV0ICs9IGA8LyR7bmFtZX0+YDtcblxuICAgIGlmIChwcmVzZXJ2ZVdoaXRlc3BhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wcmVzZXJ2aW5nV2hpdGVzcGFjZSA9IHByZXNlcnZlV2hpdGVzcGFjZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnByZXNlcnZpbmdXaGl0ZXNwYWNlKSB7XG4gICAgICB0aGlzLm91dHB1dCArPSBgXFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB0ZXh0KHN0cjogc3RyaW5nKTogdGhpcyB7XG4gICAgdGhpcy5vdXRwdXQgKz0gZXNjYXBlWG1sKHN0cik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdGFydFByZXNlcnZlV2hpdGVzcGFjZSgpIHtcbiAgICB0aGlzLnByZXNlcnZpbmdXaGl0ZXNwYWNlID0gdHJ1ZTtcbiAgfVxuICBzdG9wUHJlc2VydmVXaGl0ZXNwYWNlKCkge1xuICAgIHRoaXMucHJlc2VydmluZ1doaXRlc3BhY2UgPSBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgaW5jSW5kZW50KCkge1xuICAgIHRoaXMuaW5kZW50ID0gdGhpcy5pbmRlbnQgKyAnICAnO1xuICB9XG4gIHByaXZhdGUgZGVjSW5kZW50KCkge1xuICAgIHRoaXMuaW5kZW50ID0gdGhpcy5pbmRlbnQuc2xpY2UoMCwgLTIpO1xuICB9XG59XG5cbmNvbnN0IF9FU0NBUEVEX0NIQVJTOiBbUmVnRXhwLCBzdHJpbmddW10gPSBbXG4gIFsvJi9nLCAnJmFtcDsnXSxcbiAgWy9cIi9nLCAnJnF1b3Q7J10sXG4gIFsvJy9nLCAnJmFwb3M7J10sXG4gIFsvPC9nLCAnJmx0OyddLFxuICBbLz4vZywgJyZndDsnXVxuXTtcblxuZnVuY3Rpb24gZXNjYXBlWG1sKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBfRVNDQVBFRF9DSEFSUy5yZWR1Y2UoXG4gICAgKHQ6IHN0cmluZywgZW50cnk6IFtSZWdFeHAsIHN0cmluZ10pID0+IHQucmVwbGFjZShlbnRyeVswXSwgZW50cnlbMV0pLFxuICAgIHRleHRcbiAgKTtcbn1cbiJdfQ==