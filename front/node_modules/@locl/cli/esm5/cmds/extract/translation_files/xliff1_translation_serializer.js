/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/translation_files/xliff1_translation_serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { XmlFile } from './xml_file';
var Xliff1TranslationSerializer = /** @class */ (function () {
    function Xliff1TranslationSerializer() {
    }
    /**
     * @param {?} messages
     * @param {?} locale
     * @param {?=} isTarget
     * @return {?}
     */
    Xliff1TranslationSerializer.prototype.renderFile = /**
     * @param {?} messages
     * @param {?} locale
     * @param {?=} isTarget
     * @return {?}
     */
    function (messages, locale, isTarget) {
        var _a;
        var _this = this;
        if (isTarget === void 0) { isTarget = false; }
        /** @type {?} */
        var xml = new XmlFile();
        xml.startTag('xliff', {
            version: '1.2',
            xmlns: 'urn:oasis:names:tc:xliff:document:1.2'
        });
        /** @type {?} */
        var fileAttrs = (_a = {},
            _a['source-language'] = isTarget ? undefined : locale,
            _a['target-language'] = locale,
            _a.datatype = 'plaintext',
            _a);
        xml.startTag('file', fileAttrs);
        xml.startTag('body');
        messages.forEach((/**
         * @param {?} message
         * @return {?}
         */
        function (message) {
            xml.startTag('trans-unit', {
                id: ((/** @type {?} */ (message))).id ||
                    ((/** @type {?} */ (message))).messageId,
                datatype: 'html'
            });
            if (!isTarget) {
                _this.generateMessageTag(xml, 'source', message);
            }
            _this.generateMessageTag(xml, 'target', message);
            if (message.description) {
                _this.renderNote(xml, 'description', message.description);
            }
            if (message.meaning) {
                _this.renderNote(xml, 'meaning', message.meaning);
            }
            xml.endTag('trans-unit');
        }));
        xml.endTag('body');
        xml.endTag('file');
        xml.endTag('xliff');
        return xml.toString();
    };
    /**
     * @private
     * @param {?} xml
     * @param {?} tagName
     * @param {?} message
     * @return {?}
     */
    Xliff1TranslationSerializer.prototype.generateMessageTag = /**
     * @private
     * @param {?} xml
     * @param {?} tagName
     * @param {?} message
     * @return {?}
     */
    function (xml, tagName, message) {
        xml.startTag(tagName, {}, { preserveWhitespace: true });
        this.renderMessage(xml, message);
        xml.endTag(tagName, { preserveWhitespace: false });
    };
    /**
     * @private
     * @param {?} xml
     * @param {?} message
     * @return {?}
     */
    Xliff1TranslationSerializer.prototype.renderMessage = /**
     * @private
     * @param {?} xml
     * @param {?} message
     * @return {?}
     */
    function (xml, message) {
        xml.text(message.messageParts[0]);
        for (var i = 1; i < message.messageParts.length; i++) {
            xml.startTag('x', { id: message.placeholderNames[i - 1] }, { selfClosing: true });
            xml.text(message.messageParts[i]);
        }
    };
    /**
     * @private
     * @param {?} xml
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    Xliff1TranslationSerializer.prototype.renderNote = /**
     * @private
     * @param {?} xml
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (xml, name, value) {
        xml.startTag('note', { priority: '1', from: name }, { preserveWhitespace: true });
        xml.text(value);
        xml.endTag('note', { preserveWhitespace: false });
    };
    return Xliff1TranslationSerializer;
}());
export { Xliff1TranslationSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGxpZmYxX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2V4dHJhY3QvdHJhbnNsYXRpb25fZmlsZXMveGxpZmYxX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFVQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXJDO0lBQUE7SUE2RUEsQ0FBQzs7Ozs7OztJQTVFQyxnREFBVTs7Ozs7O0lBQVYsVUFDRSxRQUFrRCxFQUNsRCxNQUFjLEVBQ2QsUUFBZ0I7O1FBSGxCLGlCQXdDQztRQXJDQyx5QkFBQSxFQUFBLGdCQUFnQjs7WUFFVixHQUFHLEdBQUcsSUFBSSxPQUFPLEVBQUU7UUFDekIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDcEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxLQUFLLEVBQUUsdUNBQXVDO1NBQy9DLENBQUMsQ0FBQzs7WUFDRyxTQUFTO1lBQ2IsR0FBQyxpQkFBaUIsSUFBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTTtZQUNsRCxHQUFDLGlCQUFpQixJQUFHLE1BQU07WUFDM0IsV0FBUSxHQUFFLFdBQVc7ZUFDdEI7UUFDRCxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JCLFFBQVEsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxPQUFPO1lBQ3RCLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFO2dCQUN6QixFQUFFLEVBQ0EsQ0FBQyxtQkFBQSxPQUFPLEVBQWtCLENBQUMsQ0FBQyxFQUFFO29CQUM5QixDQUFDLG1CQUFBLE9BQU8sRUFBdUIsQ0FBQyxDQUFDLFNBQVM7Z0JBQzVDLFFBQVEsRUFBRSxNQUFNO2FBQ2pCLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2IsS0FBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDakQ7WUFDRCxLQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3ZCLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDMUQ7WUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQ25CLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDbEQ7WUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNCLENBQUMsRUFBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEIsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7Ozs7Ozs7SUFFTyx3REFBa0I7Ozs7Ozs7SUFBMUIsVUFDRSxHQUFZLEVBQ1osT0FBZSxFQUNmLE9BQTZDO1FBRTdDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Ozs7Ozs7SUFFTyxtREFBYTs7Ozs7O0lBQXJCLFVBQ0UsR0FBWSxFQUNaLE9BQTZDO1FBRTdDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwRCxHQUFHLENBQUMsUUFBUSxDQUNWLEdBQUcsRUFDSCxFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQ3ZDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUN0QixDQUFDO1lBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDOzs7Ozs7OztJQUVPLGdEQUFVOzs7Ozs7O0lBQWxCLFVBQW1CLEdBQVksRUFBRSxJQUFZLEVBQUUsS0FBYTtRQUMxRCxHQUFHLENBQUMsUUFBUSxDQUNWLE1BQU0sRUFDTixFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUM3QixFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUM3QixDQUFDO1FBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNILGtDQUFDO0FBQUQsQ0FBQyxBQTdFRCxJQTZFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxyXG4gKi9cclxuaW1wb3J0IHsgybVQYXJzZWRNZXNzYWdlIH0gZnJvbSAnQGFuZ3VsYXIvbG9jYWxpemUnO1xyXG5pbXBvcnQgeyBQYXJzZWRNZXNzYWdlTGVnYWN5IH0gZnJvbSAnLi4vLi4vLi4vY21kcy9jb21tb24vdXRpbCc7XHJcbmltcG9ydCB7IFRyYW5zbGF0aW9uU2VyaWFsaXplciB9IGZyb20gJy4vdHJhbnNsYXRpb25fc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IFhtbEZpbGUgfSBmcm9tICcuL3htbF9maWxlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBYbGlmZjFUcmFuc2xhdGlvblNlcmlhbGl6ZXIgaW1wbGVtZW50cyBUcmFuc2xhdGlvblNlcmlhbGl6ZXIge1xyXG4gIHJlbmRlckZpbGUoXHJcbiAgICBtZXNzYWdlczogKMm1UGFyc2VkTWVzc2FnZSB8IFBhcnNlZE1lc3NhZ2VMZWdhY3kpW10sXHJcbiAgICBsb2NhbGU6IHN0cmluZyxcclxuICAgIGlzVGFyZ2V0ID0gZmFsc2VcclxuICApOiBzdHJpbmcge1xyXG4gICAgY29uc3QgeG1sID0gbmV3IFhtbEZpbGUoKTtcclxuICAgIHhtbC5zdGFydFRhZygneGxpZmYnLCB7XHJcbiAgICAgIHZlcnNpb246ICcxLjInLFxyXG4gICAgICB4bWxuczogJ3VybjpvYXNpczpuYW1lczp0Yzp4bGlmZjpkb2N1bWVudDoxLjInXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGZpbGVBdHRycyA9IHtcclxuICAgICAgWydzb3VyY2UtbGFuZ3VhZ2UnXTogaXNUYXJnZXQgPyB1bmRlZmluZWQgOiBsb2NhbGUsXHJcbiAgICAgIFsndGFyZ2V0LWxhbmd1YWdlJ106IGxvY2FsZSxcclxuICAgICAgZGF0YXR5cGU6ICdwbGFpbnRleHQnXHJcbiAgICB9O1xyXG4gICAgeG1sLnN0YXJ0VGFnKCdmaWxlJywgZmlsZUF0dHJzKTtcclxuICAgIHhtbC5zdGFydFRhZygnYm9keScpO1xyXG4gICAgbWVzc2FnZXMuZm9yRWFjaChtZXNzYWdlID0+IHtcclxuICAgICAgeG1sLnN0YXJ0VGFnKCd0cmFucy11bml0Jywge1xyXG4gICAgICAgIGlkOlxyXG4gICAgICAgICAgKG1lc3NhZ2UgYXMgybVQYXJzZWRNZXNzYWdlKS5pZCB8fFxyXG4gICAgICAgICAgKG1lc3NhZ2UgYXMgUGFyc2VkTWVzc2FnZUxlZ2FjeSkubWVzc2FnZUlkLFxyXG4gICAgICAgIGRhdGF0eXBlOiAnaHRtbCdcclxuICAgICAgfSk7XHJcbiAgICAgIGlmICghaXNUYXJnZXQpIHtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlTWVzc2FnZVRhZyh4bWwsICdzb3VyY2UnLCBtZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmdlbmVyYXRlTWVzc2FnZVRhZyh4bWwsICd0YXJnZXQnLCBtZXNzYWdlKTtcclxuICAgICAgaWYgKG1lc3NhZ2UuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICB0aGlzLnJlbmRlck5vdGUoeG1sLCAnZGVzY3JpcHRpb24nLCBtZXNzYWdlLmRlc2NyaXB0aW9uKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobWVzc2FnZS5tZWFuaW5nKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJOb3RlKHhtbCwgJ21lYW5pbmcnLCBtZXNzYWdlLm1lYW5pbmcpO1xyXG4gICAgICB9XHJcbiAgICAgIHhtbC5lbmRUYWcoJ3RyYW5zLXVuaXQnKTtcclxuICAgIH0pO1xyXG4gICAgeG1sLmVuZFRhZygnYm9keScpO1xyXG4gICAgeG1sLmVuZFRhZygnZmlsZScpO1xyXG4gICAgeG1sLmVuZFRhZygneGxpZmYnKTtcclxuICAgIHJldHVybiB4bWwudG9TdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2VuZXJhdGVNZXNzYWdlVGFnKFxyXG4gICAgeG1sOiBYbWxGaWxlLFxyXG4gICAgdGFnTmFtZTogc3RyaW5nLFxyXG4gICAgbWVzc2FnZTogybVQYXJzZWRNZXNzYWdlIHwgUGFyc2VkTWVzc2FnZUxlZ2FjeVxyXG4gICkge1xyXG4gICAgeG1sLnN0YXJ0VGFnKHRhZ05hbWUsIHt9LCB7IHByZXNlcnZlV2hpdGVzcGFjZTogdHJ1ZSB9KTtcclxuICAgIHRoaXMucmVuZGVyTWVzc2FnZSh4bWwsIG1lc3NhZ2UpO1xyXG4gICAgeG1sLmVuZFRhZyh0YWdOYW1lLCB7IHByZXNlcnZlV2hpdGVzcGFjZTogZmFsc2UgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbmRlck1lc3NhZ2UoXHJcbiAgICB4bWw6IFhtbEZpbGUsXHJcbiAgICBtZXNzYWdlOiDJtVBhcnNlZE1lc3NhZ2UgfCBQYXJzZWRNZXNzYWdlTGVnYWN5XHJcbiAgKTogdm9pZCB7XHJcbiAgICB4bWwudGV4dChtZXNzYWdlLm1lc3NhZ2VQYXJ0c1swXSk7XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1lc3NhZ2UubWVzc2FnZVBhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHhtbC5zdGFydFRhZyhcclxuICAgICAgICAneCcsXHJcbiAgICAgICAgeyBpZDogbWVzc2FnZS5wbGFjZWhvbGRlck5hbWVzW2kgLSAxXSB9LFxyXG4gICAgICAgIHsgc2VsZkNsb3Npbmc6IHRydWUgfVxyXG4gICAgICApO1xyXG4gICAgICB4bWwudGV4dChtZXNzYWdlLm1lc3NhZ2VQYXJ0c1tpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbmRlck5vdGUoeG1sOiBYbWxGaWxlLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHhtbC5zdGFydFRhZyhcclxuICAgICAgJ25vdGUnLFxyXG4gICAgICB7IHByaW9yaXR5OiAnMScsIGZyb206IG5hbWUgfSxcclxuICAgICAgeyBwcmVzZXJ2ZVdoaXRlc3BhY2U6IHRydWUgfVxyXG4gICAgKTtcclxuICAgIHhtbC50ZXh0KHZhbHVlKTtcclxuICAgIHhtbC5lbmRUYWcoJ25vdGUnLCB7IHByZXNlcnZlV2hpdGVzcGFjZTogZmFsc2UgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==