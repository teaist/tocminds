/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/translation_files/xtb_translation_serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { XmlFile } from './xml_file';
/** @type {?} */
var DOCTYPE = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE translationbundle [\n<!ELEMENT translationbundle (translation)*>\n<!ATTLIST translationbundle lang CDATA #REQUIRED>\n\n<!ELEMENT translation (#PCDATA|ph)*>\n<!ATTLIST translation id CDATA #REQUIRED>\n<!ATTLIST translation desc CDATA #IMPLIED>\n<!ATTLIST translation meaning CDATA #IMPLIED>\n<!ATTLIST translation xml:space (default|preserve) \"default\">\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>\n]>\n";
var XtbTranslationSerializer = /** @class */ (function () {
    function XtbTranslationSerializer() {
    }
    /**
     * @param {?} messages
     * @param {?} locale
     * @return {?}
     */
    XtbTranslationSerializer.prototype.renderFile = /**
     * @param {?} messages
     * @param {?} locale
     * @return {?}
     */
    function (messages, locale) {
        var _this = this;
        /** @type {?} */
        var xml = new XmlFile();
        xml.startTag('translationbundle', { lang: locale });
        messages.forEach((/**
         * @param {?} message
         * @return {?}
         */
        function (message) {
            xml.startTag('translation', {
                id: ((/** @type {?} */ (message))).id ||
                    ((/** @type {?} */ (message))).messageId,
                desc: message.description,
                meaning: message.meaning
            }, { preserveWhitespace: true });
            _this.renderMessage(xml, message);
            xml.endTag('translation', { preserveWhitespace: false });
        }));
        xml.endTag('translationbundle');
        return DOCTYPE + xml.toString();
    };
    /**
     * @private
     * @param {?} xml
     * @param {?} message
     * @return {?}
     */
    XtbTranslationSerializer.prototype.renderMessage = /**
     * @private
     * @param {?} xml
     * @param {?} message
     * @return {?}
     */
    function (xml, message) {
        xml.text(message.messageParts[0]);
        for (var i = 1; i < message.messageParts.length; i++) {
            xml.startTag('ph', { name: message.placeholderNames[i - 1] }, { selfClosing: true });
            xml.text(message.messageParts[i]);
        }
    };
    return XtbTranslationSerializer;
}());
export { XtbTranslationSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHRiX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2V4dHJhY3QvdHJhbnNsYXRpb25fZmlsZXMveHRiX3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFVQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDOztJQUUvQixPQUFPLEdBQUcsOGZBZ0JmO0FBRUQ7SUFBQTtJQXdDQSxDQUFDOzs7Ozs7SUF2Q0MsNkNBQVU7Ozs7O0lBQVYsVUFDRSxRQUFrRCxFQUNsRCxNQUFjO1FBRmhCLGlCQXVCQzs7WUFuQk8sR0FBRyxHQUFHLElBQUksT0FBTyxFQUFFO1FBQ3pCLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNwRCxRQUFRLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsT0FBTztZQUN0QixHQUFHLENBQUMsUUFBUSxDQUNWLGFBQWEsRUFDYjtnQkFDRSxFQUFFLEVBQ0EsQ0FBQyxtQkFBQSxPQUFPLEVBQWtCLENBQUMsQ0FBQyxFQUFFO29CQUM5QixDQUFDLG1CQUFBLE9BQU8sRUFBdUIsQ0FBQyxDQUFDLFNBQVM7Z0JBQzVDLElBQUksRUFBRSxPQUFPLENBQUMsV0FBVztnQkFDekIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2FBQ3pCLEVBQ0QsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FDN0IsQ0FBQztZQUNGLEtBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMzRCxDQUFDLEVBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNoQyxPQUFPLE9BQU8sR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7Ozs7OztJQUVPLGdEQUFhOzs7Ozs7SUFBckIsVUFDRSxHQUFZLEVBQ1osT0FBNkM7UUFFN0MsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BELEdBQUcsQ0FBQyxRQUFRLENBQ1YsSUFBSSxFQUNKLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFDekMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQ3RCLENBQUM7WUFDRixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7SUFDSCwrQkFBQztBQUFELENBQUMsQUF4Q0QsSUF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcbmltcG9ydCB7IMm1UGFyc2VkTWVzc2FnZSB9IGZyb20gJ0Bhbmd1bGFyL2xvY2FsaXplJztcclxuaW1wb3J0IHsgUGFyc2VkTWVzc2FnZUxlZ2FjeSB9IGZyb20gJy4uLy4uLy4uL2NtZHMvY29tbW9uL3V0aWwnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcmlhbGl6ZXIgfSBmcm9tICcuL3RyYW5zbGF0aW9uX3NlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBYbWxGaWxlIH0gZnJvbSAnLi94bWxfZmlsZSc7XHJcblxyXG5jb25zdCBET0NUWVBFID0gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PlxyXG48IURPQ1RZUEUgdHJhbnNsYXRpb25idW5kbGUgW1xyXG48IUVMRU1FTlQgdHJhbnNsYXRpb25idW5kbGUgKHRyYW5zbGF0aW9uKSo+XHJcbjwhQVRUTElTVCB0cmFuc2xhdGlvbmJ1bmRsZSBsYW5nIENEQVRBICNSRVFVSVJFRD5cclxuXHJcbjwhRUxFTUVOVCB0cmFuc2xhdGlvbiAoI1BDREFUQXxwaCkqPlxyXG48IUFUVExJU1QgdHJhbnNsYXRpb24gaWQgQ0RBVEEgI1JFUVVJUkVEPlxyXG48IUFUVExJU1QgdHJhbnNsYXRpb24gZGVzYyBDREFUQSAjSU1QTElFRD5cclxuPCFBVFRMSVNUIHRyYW5zbGF0aW9uIG1lYW5pbmcgQ0RBVEEgI0lNUExJRUQ+XHJcbjwhQVRUTElTVCB0cmFuc2xhdGlvbiB4bWw6c3BhY2UgKGRlZmF1bHR8cHJlc2VydmUpIFwiZGVmYXVsdFwiPlxyXG5cclxuPCFFTEVNRU5UIHBoICgjUENEQVRBfGV4KSo+XHJcbjwhQVRUTElTVCBwaCBuYW1lIENEQVRBICNSRVFVSVJFRD5cclxuXHJcbjwhRUxFTUVOVCBleCAoI1BDREFUQSk+XHJcbl0+XHJcbmA7XHJcblxyXG5leHBvcnQgY2xhc3MgWHRiVHJhbnNsYXRpb25TZXJpYWxpemVyIGltcGxlbWVudHMgVHJhbnNsYXRpb25TZXJpYWxpemVyIHtcclxuICByZW5kZXJGaWxlKFxyXG4gICAgbWVzc2FnZXM6ICjJtVBhcnNlZE1lc3NhZ2UgfCBQYXJzZWRNZXNzYWdlTGVnYWN5KVtdLFxyXG4gICAgbG9jYWxlOiBzdHJpbmdcclxuICApOiBzdHJpbmcge1xyXG4gICAgY29uc3QgeG1sID0gbmV3IFhtbEZpbGUoKTtcclxuICAgIHhtbC5zdGFydFRhZygndHJhbnNsYXRpb25idW5kbGUnLCB7IGxhbmc6IGxvY2FsZSB9KTtcclxuICAgIG1lc3NhZ2VzLmZvckVhY2gobWVzc2FnZSA9PiB7XHJcbiAgICAgIHhtbC5zdGFydFRhZyhcclxuICAgICAgICAndHJhbnNsYXRpb24nLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOlxyXG4gICAgICAgICAgICAobWVzc2FnZSBhcyDJtVBhcnNlZE1lc3NhZ2UpLmlkIHx8XHJcbiAgICAgICAgICAgIChtZXNzYWdlIGFzIFBhcnNlZE1lc3NhZ2VMZWdhY3kpLm1lc3NhZ2VJZCxcclxuICAgICAgICAgIGRlc2M6IG1lc3NhZ2UuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICBtZWFuaW5nOiBtZXNzYWdlLm1lYW5pbmdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgcHJlc2VydmVXaGl0ZXNwYWNlOiB0cnVlIH1cclxuICAgICAgKTtcclxuICAgICAgdGhpcy5yZW5kZXJNZXNzYWdlKHhtbCwgbWVzc2FnZSk7XHJcbiAgICAgIHhtbC5lbmRUYWcoJ3RyYW5zbGF0aW9uJywgeyBwcmVzZXJ2ZVdoaXRlc3BhY2U6IGZhbHNlIH0pO1xyXG4gICAgfSk7XHJcbiAgICB4bWwuZW5kVGFnKCd0cmFuc2xhdGlvbmJ1bmRsZScpO1xyXG4gICAgcmV0dXJuIERPQ1RZUEUgKyB4bWwudG9TdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyTWVzc2FnZShcclxuICAgIHhtbDogWG1sRmlsZSxcclxuICAgIG1lc3NhZ2U6IMm1UGFyc2VkTWVzc2FnZSB8IFBhcnNlZE1lc3NhZ2VMZWdhY3lcclxuICApOiB2b2lkIHtcclxuICAgIHhtbC50ZXh0KG1lc3NhZ2UubWVzc2FnZVBhcnRzWzBdKTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbWVzc2FnZS5tZXNzYWdlUGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgeG1sLnN0YXJ0VGFnKFxyXG4gICAgICAgICdwaCcsXHJcbiAgICAgICAgeyBuYW1lOiBtZXNzYWdlLnBsYWNlaG9sZGVyTmFtZXNbaSAtIDFdIH0sXHJcbiAgICAgICAgeyBzZWxmQ2xvc2luZzogdHJ1ZSB9XHJcbiAgICAgICk7XHJcbiAgICAgIHhtbC50ZXh0KG1lc3NhZ2UubWVzc2FnZVBhcnRzW2ldKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19