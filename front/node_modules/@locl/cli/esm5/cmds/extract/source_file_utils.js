/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/source_file_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends, __values } from "tslib";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ɵisMissingTranslationError, ɵmakeTemplateObject, ɵtranslate } from '@angular/localize';
import * as t from '@babel/types';
/**
 * Is the given `expression` an identifier with the correct name
 * @param {?} expression The expression to check.
 * @param {?} name
 * @return {?}
 */
export function isNamedIdentifier(expression, name) {
    return expression.isIdentifier() && expression.node.name === name;
}
/**
 * Is the given `identifier` declared globally.
 * @param {?} identifier The identifier to check.
 * @return {?}
 */
export function isGlobalIdentifier(identifier) {
    return (!identifier.scope || !identifier.scope.hasBinding(identifier.node.name));
}
/**
 * Build a translated expression to replace the call to `$localize`.
 * @param {?} messageParts The static parts of the message.
 * @param {?} substitutions The expressions to substitute into the message.
 * @return {?}
 */
export function buildLocalizeReplacement(messageParts, substitutions) {
    /** @type {?} */
    var mappedString = t.stringLiteral(messageParts[0]);
    for (var i = 1; i < messageParts.length; i++) {
        mappedString = t.binaryExpression('+', mappedString, wrapInParensIfNecessary(substitutions[i - 1]));
        mappedString = t.binaryExpression('+', mappedString, t.stringLiteral(messageParts[i]));
    }
    return mappedString;
}
/**
 * Extract the message parts from the given `call` (to `$localize`).
 *
 * The message parts will either by the first argument to the `call` or it will be wrapped in call
 * to a helper function like `__makeTemplateObject`.
 *
 * @param {?} call The AST node of the call to process.
 * @return {?}
 */
export function unwrapMessagePartsFromLocalizeCall(call) {
    /** @type {?} */
    var cooked = (/** @type {?} */ (call.get('arguments')[0]));
    if (cooked === undefined) {
        throw new BabelParseError(call.node, '`$localize` called without any arguments.');
    }
    if (!cooked.isExpression()) {
        throw new BabelParseError(cooked.node, 'Unexpected argument to `$localize` (expected an array).');
    }
    // If there is no call to `__makeTemplateObject(...)`, then `raw` must be the same as `cooked`.
    /** @type {?} */
    var raw = cooked;
    // Check for cached call of the form `x || x = __makeTemplateObject(...)`
    if (cooked.isLogicalExpression() &&
        cooked.node.operator === '||' &&
        cooked.get('left').isIdentifier()) {
        /** @type {?} */
        var right = cooked.get('right');
        if (right.isAssignmentExpression()) {
            cooked = right.get('right');
            if (!cooked.isExpression()) {
                throw new BabelParseError(cooked.node, 'Unexpected "makeTemplateObject()" function (expected an expression).');
            }
        }
    }
    // Check for `__makeTemplateObject(cooked, raw)` or `__templateObject()` calls.
    if (cooked.isCallExpression()) {
        /** @type {?} */
        var cookedCall = cooked;
        if (cookedCall.get('arguments').length === 0) {
            // No arguments so perhaps it is a `__templateObject()` call.
            // Unwrap this to get the `_taggedTemplateLiteral(cooked, raw)` call.
            cookedCall = unwrapLazyLoadHelperCall(cookedCall);
        }
        cooked = cookedCall.get('arguments')[0];
        if (!cooked.isExpression()) {
            throw new BabelParseError(cooked.node, 'Unexpected `cooked` argument to the "makeTemplateObject()" function (expected an expression).');
        }
        /** @type {?} */
        var arg2 = cookedCall.get('arguments')[1];
        if (arg2 && !arg2.isExpression()) {
            throw new BabelParseError(arg2.node, 'Unexpected `raw` argument to the "makeTemplateObject()" function (expected an expression).');
        }
        // If there is no second argument then assume that raw and cooked are the same
        raw = arg2 !== undefined ? arg2 : cooked;
    }
    /** @type {?} */
    var cookedStrings = unwrapStringLiteralArray(cooked.node);
    /** @type {?} */
    var rawStrings = unwrapStringLiteralArray(raw.node);
    return ɵmakeTemplateObject(cookedStrings, rawStrings);
}
/**
 * @param {?} call
 * @return {?}
 */
export function unwrapSubstitutionsFromLocalizeCall(call) {
    /** @type {?} */
    var expressions = call.arguments.splice(1);
    if (!isArrayOfExpressions(expressions)) {
        /** @type {?} */
        var badExpression = (/** @type {?} */ (expressions.find((/**
         * @param {?} expression
         * @return {?}
         */
        function (expression) { return !t.isExpression(expression); }))));
        throw new BabelParseError(badExpression, 'Invalid substitutions for `$localize` (expected all substitution arguments to be expressions).');
    }
    return expressions;
}
/**
 * @param {?} elements
 * @return {?}
 */
export function unwrapMessagePartsFromTemplateLiteral(elements) {
    /** @type {?} */
    var cooked = elements.map((/**
     * @param {?} q
     * @return {?}
     */
    function (q) {
        if (q.value.cooked === undefined) {
            throw new BabelParseError(q, "Unexpected undefined message part in \"" + elements.map((/**
             * @param {?} eq
             * @return {?}
             */
            function (eq) { return eq.value.cooked; })) + "\"");
        }
        return q.value.cooked;
    }));
    /** @type {?} */
    var raw = elements.map((/**
     * @param {?} q
     * @return {?}
     */
    function (q) { return q.value.raw; }));
    return ɵmakeTemplateObject(cooked, raw);
}
/**
 * Wrap the given `expression` in parentheses if it is a binary expression.
 *
 * This ensures that this expression is evaluated correctly if it is embedded in another expression.
 *
 * @param {?} expression The expression to potentially wrap.
 * @return {?}
 */
export function wrapInParensIfNecessary(expression) {
    if (t.isBinaryExpression(expression)) {
        return t.parenthesizedExpression(expression);
    }
    else {
        return expression;
    }
}
/**
 * Extract the string values from an `array` of string literals.
 * @param {?} array The array to unwrap.
 * @return {?}
 */
export function unwrapStringLiteralArray(array) {
    if (!isStringLiteralArray(array)) {
        throw new BabelParseError(array, 'Unexpected messageParts for `$localize` (expected an array of strings).');
    }
    return array.elements.map((/**
     * @param {?} str
     * @return {?}
     */
    function (str) { return str.value; }));
}
/**
 * This expression is believed to be a call to a "lazy-load" template object helper function.
 * This is expected to be of the form:
 *
 * ```ts
 *  function _templateObject() {
 *    var e = _taggedTemplateLiteral(['cooked string', 'raw string']);
 *    return _templateObject = function() { return e }, e
 *  }
 * ```
 *
 * We unwrap this to return the call to `_taggedTemplateLiteral()`.
 *
 * @param {?} call the call expression to unwrap
 * @return {?} the  call expression
 */
export function unwrapLazyLoadHelperCall(call) {
    /** @type {?} */
    var callee = (/** @type {?} */ (call.get('callee')));
    if (!callee.isIdentifier()) {
        throw new BabelParseError(callee.node, 'Unexpected lazy-load helper call (expected a call of the form `_templateObject()`).');
    }
    /** @type {?} */
    var lazyLoadBinding = call.scope.getBinding(callee.node.name);
    if (!lazyLoadBinding) {
        throw new BabelParseError(callee.node, 'Missing declaration for lazy-load helper function');
    }
    /** @type {?} */
    var lazyLoadFn = lazyLoadBinding.path;
    if (!lazyLoadFn.isFunctionDeclaration()) {
        throw new BabelParseError(((/** @type {?} */ (lazyLoadFn))).node, 'Unexpected expression (expected a function declaration');
    }
    /** @type {?} */
    var returnedNode = getReturnedExpression(lazyLoadFn);
    if (returnedNode.isCallExpression()) {
        return returnedNode;
    }
    if (returnedNode.isIdentifier()) {
        /** @type {?} */
        var identifierName = returnedNode.node.name;
        /** @type {?} */
        var declaration = returnedNode.scope.getBinding(identifierName);
        if (declaration === undefined) {
            throw new BabelParseError(returnedNode.node, 'Missing declaration for return value from helper.');
        }
        if (!declaration.path.isVariableDeclarator()) {
            throw new BabelParseError(((/** @type {?} */ (declaration))).path.node, 'Unexpected helper return value declaration (expected a variable declaration).');
        }
        /** @type {?} */
        var initializer = declaration.path.get('init');
        if (!initializer.isCallExpression()) {
            throw new BabelParseError(declaration.path.node, 'Unexpected return value from helper (expected a call expression).');
        }
        // Remove the lazy load helper if this is the only reference to it.
        if (lazyLoadBinding.references === 1) {
            lazyLoadFn.remove();
        }
        return initializer;
    }
    return call;
}
/**
 * @param {?} fn
 * @return {?}
 */
function getReturnedExpression(fn) {
    var e_1, _a;
    /** @type {?} */
    var bodyStatements = ((/** @type {?} */ (fn.get('body')))).get('body');
    try {
        for (var bodyStatements_1 = __values(bodyStatements), bodyStatements_1_1 = bodyStatements_1.next(); !bodyStatements_1_1.done; bodyStatements_1_1 = bodyStatements_1.next()) {
            var statement = bodyStatements_1_1.value;
            if (statement.isReturnStatement()) {
                /** @type {?} */
                var argument = statement.get('argument');
                if (argument.isSequenceExpression()) {
                    /** @type {?} */
                    var expressions = argument.get('expressions');
                    return Array.isArray(expressions)
                        ? expressions[expressions.length - 1]
                        : expressions;
                }
                else if (argument.isExpression()) {
                    return argument;
                }
                else {
                    throw new BabelParseError(statement.node, 'Invalid return argument in helper function (expected an expression).');
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (bodyStatements_1_1 && !bodyStatements_1_1.done && (_a = bodyStatements_1.return)) _a.call(bodyStatements_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    throw new BabelParseError(fn.node, 'Missing return statement in helper function.');
}
/**
 * Is the given `node` an array of literal strings?
 *
 * @param {?} node The node to test.
 * @return {?}
 */
export function isStringLiteralArray(node) {
    return (t.isArrayExpression(node) &&
        node.elements.every((/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return t.isStringLiteral(element); })));
}
/**
 * Are all the given `nodes` expressions?
 * @param {?} nodes The nodes to test.
 * @return {?}
 */
export function isArrayOfExpressions(nodes) {
    return nodes.every((/**
     * @param {?} element
     * @return {?}
     */
    function (element) { return t.isExpression(element); }));
}
/**
 * Options that affect how the `makeEsXXXTranslatePlugin()` functions work.
 * @record
 */
export function TranslatePluginOptions() { }
if (false) {
    /** @type {?|undefined} */
    TranslatePluginOptions.prototype.missingTranslation;
    /** @type {?|undefined} */
    TranslatePluginOptions.prototype.localizeName;
}
/**
 * Translate the text of the given message, using the given translations.
 *
 * Logs as warning if the translation is not available
 * @param {?} diagnostics
 * @param {?} translations
 * @param {?} messageParts
 * @param {?} substitutions
 * @param {?} missingTranslation
 * @return {?}
 */
export function translate(diagnostics, translations, messageParts, substitutions, missingTranslation) {
    try {
        return ɵtranslate(translations, messageParts, substitutions);
    }
    catch (e) {
        if (ɵisMissingTranslationError(e)) {
            if (missingTranslation === 'error') {
                diagnostics.error(e.message);
            }
            else if (missingTranslation === 'warning') {
                diagnostics.warn(e.message);
            }
            // Return the parsed message because this will have the meta blocks stripped
            return [
                ɵmakeTemplateObject(e.parsedMessage.messageParts, e.parsedMessage.messageParts),
                substitutions
            ];
        }
        else {
            diagnostics.error(e.message);
            return [messageParts, substitutions];
        }
    }
}
var BabelParseError = /** @class */ (function (_super) {
    __extends(BabelParseError, _super);
    function BabelParseError(node, message) {
        var _this = _super.call(this, message) || this;
        _this.node = node;
        _this.type = 'BabelParseError';
        return _this;
    }
    return BabelParseError;
}(Error));
export { BabelParseError };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BabelParseError.prototype.type;
    /** @type {?} */
    BabelParseError.prototype.node;
}
/**
 * @param {?} e
 * @return {?}
 */
export function isBabelParseError(e) {
    return e.type === 'BabelParseError';
}
//# sourceMappingURL=data:application/json;base64,