/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/source_files/es2015_extract_plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ɵparseMessage } from '@angular/localize';
import { isGlobalIdentifier, isNamedIdentifier, unwrapMessagePartsFromTemplateLiteral } from '../source_file_utils';
/**
 * @param {?} messages
 * @param {?} diagnostics
 * @param {?=} localizeName
 * @return {?}
 */
export function makeEs2015ExtractPlugin(messages, diagnostics, localizeName) {
    if (localizeName === void 0) { localizeName = '$localize'; }
    return {
        visitor: {
            TaggedTemplateExpression: /**
             * @param {?} path
             * @return {?}
             */
            function (path) {
                /** @type {?} */
                var tag = path.get('tag');
                if (isNamedIdentifier(tag, localizeName) && isGlobalIdentifier(tag)) {
                    /** @type {?} */
                    var messageParts = unwrapMessagePartsFromTemplateLiteral(path.node.quasi.quasis);
                    /** @type {?} */
                    var message_1 = ɵparseMessage(messageParts, path.node.quasi.expressions);
                    if (!messages.find((/**
                     * @param {?} msg
                     * @return {?}
                     */
                    function (msg) {
                        return message_1.id
                            ? msg.id === message_1.id
                            : msg.messageId ===
                                ((/** @type {?} */ (((/** @type {?} */ (message_1)))))).messageId;
                    }))) {
                        messages.push(message_1);
                    }
                }
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXMyMDE1X2V4dHJhY3RfcGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxvY2wvY2xpLyIsInNvdXJjZXMiOlsiY21kcy9leHRyYWN0L3NvdXJjZV9maWxlcy9lczIwMTVfZXh0cmFjdF9wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxFQUFrQixhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUtsRSxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLGlCQUFpQixFQUNqQixxQ0FBcUMsRUFDdEMsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7OztBQUc5QixNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLFFBQWtELEVBQ2xELFdBQXdCLEVBQ3hCLFlBQTBCO0lBQTFCLDZCQUFBLEVBQUEsMEJBQTBCO0lBRTFCLE9BQU87UUFDTCxPQUFPLEVBQUU7WUFDUCx3QkFBd0I7Ozs7WUFBeEIsVUFBeUIsSUFBd0M7O29CQUN6RCxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7Z0JBQzNCLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxFQUFFOzt3QkFDN0QsWUFBWSxHQUFHLHFDQUFxQyxDQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQ3ZCOzt3QkFDSyxTQUFPLEdBQXlDLGFBQWEsQ0FDakUsWUFBWSxFQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDNUI7b0JBQ0QsSUFDRSxDQUFDLFFBQVEsQ0FBQyxJQUFJOzs7O29CQUFDLFVBQUMsR0FBUTt3QkFDdEIsT0FBQSxTQUFPLENBQUMsRUFBRTs0QkFDUixDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxTQUFPLENBQUMsRUFBRTs0QkFDdkIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTO2dDQUNiLENBQUMsbUJBQUEsQ0FBQyxtQkFBUyxTQUFPLEVBQUEsQ0FBQyxFQUF1QixDQUFDLENBQUMsU0FBUztvQkFIekQsQ0FHeUQsRUFDMUQsRUFDRDt3QkFDQSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQU8sQ0FBQyxDQUFDO3FCQUN4QjtpQkFDRjtZQUNILENBQUM7U0FDRjtLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXHJcbiAqL1xyXG5pbXBvcnQgeyDJtVBhcnNlZE1lc3NhZ2UsIMm1cGFyc2VNZXNzYWdlIH0gZnJvbSAnQGFuZ3VsYXIvbG9jYWxpemUnO1xyXG5pbXBvcnQgeyBOb2RlUGF0aCwgUGx1Z2luT2JqIH0gZnJvbSAnQGJhYmVsL2NvcmUnO1xyXG5pbXBvcnQgeyBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24gfSBmcm9tICdAYmFiZWwvdHlwZXMnO1xyXG5pbXBvcnQgeyBQYXJzZWRNZXNzYWdlTGVnYWN5IH0gZnJvbSAnLi4vLi4vLi4vY21kcy9jb21tb24vdXRpbCc7XHJcblxyXG5pbXBvcnQge1xyXG4gIGlzR2xvYmFsSWRlbnRpZmllcixcclxuICBpc05hbWVkSWRlbnRpZmllcixcclxuICB1bndyYXBNZXNzYWdlUGFydHNGcm9tVGVtcGxhdGVMaXRlcmFsXHJcbn0gZnJvbSAnLi4vc291cmNlX2ZpbGVfdXRpbHMnO1xyXG5pbXBvcnQgeyBEaWFnbm9zdGljcyB9IGZyb20gJy4uLy4uL2NvbW1vbi9kaWFnbm9zdGljcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZUVzMjAxNUV4dHJhY3RQbHVnaW4oXHJcbiAgbWVzc2FnZXM6ICjJtVBhcnNlZE1lc3NhZ2UgfCBQYXJzZWRNZXNzYWdlTGVnYWN5KVtdLFxyXG4gIGRpYWdub3N0aWNzOiBEaWFnbm9zdGljcyxcclxuICBsb2NhbGl6ZU5hbWUgPSAnJGxvY2FsaXplJ1xyXG4pOiBQbHVnaW5PYmoge1xyXG4gIHJldHVybiB7XHJcbiAgICB2aXNpdG9yOiB7XHJcbiAgICAgIFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihwYXRoOiBOb2RlUGF0aDxUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24+KSB7XHJcbiAgICAgICAgY29uc3QgdGFnID0gcGF0aC5nZXQoJ3RhZycpO1xyXG4gICAgICAgIGlmIChpc05hbWVkSWRlbnRpZmllcih0YWcsIGxvY2FsaXplTmFtZSkgJiYgaXNHbG9iYWxJZGVudGlmaWVyKHRhZykpIHtcclxuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VQYXJ0cyA9IHVud3JhcE1lc3NhZ2VQYXJ0c0Zyb21UZW1wbGF0ZUxpdGVyYWwoXHJcbiAgICAgICAgICAgIHBhdGgubm9kZS5xdWFzaS5xdWFzaXNcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBjb25zdCBtZXNzYWdlOiDJtVBhcnNlZE1lc3NhZ2UgfCBQYXJzZWRNZXNzYWdlTGVnYWN5ID0gybVwYXJzZU1lc3NhZ2UoXHJcbiAgICAgICAgICAgIG1lc3NhZ2VQYXJ0cyxcclxuICAgICAgICAgICAgcGF0aC5ub2RlLnF1YXNpLmV4cHJlc3Npb25zXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhbWVzc2FnZXMuZmluZCgobXNnOiBhbnkpID0+XHJcbiAgICAgICAgICAgICAgbWVzc2FnZS5pZFxyXG4gICAgICAgICAgICAgICAgPyBtc2cuaWQgPT09IG1lc3NhZ2UuaWRcclxuICAgICAgICAgICAgICAgIDogbXNnLm1lc3NhZ2VJZCA9PT1cclxuICAgICAgICAgICAgICAgICAgKCg8dW5rbm93bj5tZXNzYWdlKSBhcyBQYXJzZWRNZXNzYWdlTGVnYWN5KS5tZXNzYWdlSWRcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iXX0=