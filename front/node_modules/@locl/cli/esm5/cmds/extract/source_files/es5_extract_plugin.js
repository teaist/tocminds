/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/source_files/es5_extract_plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ɵparseMessage } from '@angular/localize';
import { isGlobalIdentifier, isNamedIdentifier, unwrapMessagePartsFromLocalizeCall, unwrapSubstitutionsFromLocalizeCall } from '../source_file_utils';
/**
 * @param {?} messages
 * @param {?} diagnostics
 * @param {?=} localizeName
 * @return {?}
 */
export function makeEs5ExtractPlugin(messages, diagnostics, localizeName) {
    if (localizeName === void 0) { localizeName = '$localize'; }
    return {
        visitor: {
            CallExpression: /**
             * @param {?} callPath
             * @return {?}
             */
            function (callPath) {
                /** @type {?} */
                var calleePath = callPath.get('callee');
                if (isNamedIdentifier(calleePath, localizeName) &&
                    isGlobalIdentifier(calleePath)) {
                    /** @type {?} */
                    var messageParts = unwrapMessagePartsFromLocalizeCall(callPath);
                    /** @type {?} */
                    var expressions = unwrapSubstitutionsFromLocalizeCall(callPath.node);
                    /** @type {?} */
                    var message_1 = ɵparseMessage(messageParts, expressions);
                    if (!messages.find((/**
                     * @param {?} msg
                     * @return {?}
                     */
                    function (msg) {
                        return message_1.id
                            ? msg.id === message_1.id
                            : msg.messageId ===
                                ((/** @type {?} */ (((/** @type {?} */ (message_1)))))).messageId;
                    }))) {
                        messages.push(message_1);
                    }
                }
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXM1X2V4dHJhY3RfcGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxvY2wvY2xpLyIsInNvdXJjZXMiOlsiY21kcy9leHRyYWN0L3NvdXJjZV9maWxlcy9lczVfZXh0cmFjdF9wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxFQUFrQixhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUtsRSxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLGlCQUFpQixFQUNqQixrQ0FBa0MsRUFDbEMsbUNBQW1DLEVBQ3BDLE1BQU0sc0JBQXNCLENBQUM7Ozs7Ozs7QUFHOUIsTUFBTSxVQUFVLG9CQUFvQixDQUNsQyxRQUFrRCxFQUNsRCxXQUF3QixFQUN4QixZQUEwQjtJQUExQiw2QkFBQSxFQUFBLDBCQUEwQjtJQUUxQixPQUFPO1FBQ0wsT0FBTyxFQUFFO1lBQ1AsY0FBYzs7OztZQUFkLFVBQWUsUUFBa0M7O29CQUN6QyxVQUFVLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7Z0JBQ3pDLElBQ0UsaUJBQWlCLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQztvQkFDM0Msa0JBQWtCLENBQUMsVUFBVSxDQUFDLEVBQzlCOzt3QkFDTSxZQUFZLEdBQUcsa0NBQWtDLENBQUMsUUFBUSxDQUFDOzt3QkFDM0QsV0FBVyxHQUFHLG1DQUFtQyxDQUNyRCxRQUFRLENBQUMsSUFBSSxDQUNkOzt3QkFDSyxTQUFPLEdBQXlDLGFBQWEsQ0FDakUsWUFBWSxFQUNaLFdBQVcsQ0FDWjtvQkFDRCxJQUNFLENBQUMsUUFBUSxDQUFDLElBQUk7Ozs7b0JBQUMsVUFBQyxHQUFRO3dCQUN0QixPQUFBLFNBQU8sQ0FBQyxFQUFFOzRCQUNSLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLFNBQU8sQ0FBQyxFQUFFOzRCQUN2QixDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVM7Z0NBQ2IsQ0FBQyxtQkFBQSxDQUFDLG1CQUFTLFNBQU8sRUFBQSxDQUFDLEVBQXVCLENBQUMsQ0FBQyxTQUFTO29CQUh6RCxDQUd5RCxFQUMxRCxFQUNEO3dCQUNBLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBTyxDQUFDLENBQUM7cUJBQ3hCO2lCQUNGO1lBQ0gsQ0FBQztTQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyDJtVBhcnNlZE1lc3NhZ2UsIMm1cGFyc2VNZXNzYWdlIH0gZnJvbSAnQGFuZ3VsYXIvbG9jYWxpemUnO1xuaW1wb3J0IHsgTm9kZVBhdGgsIFBsdWdpbk9iaiB9IGZyb20gJ0BiYWJlbC9jb3JlJztcbmltcG9ydCB7IENhbGxFeHByZXNzaW9uIH0gZnJvbSAnQGJhYmVsL3R5cGVzJztcbmltcG9ydCB7IFBhcnNlZE1lc3NhZ2VMZWdhY3kgfSBmcm9tICcuLi8uLi8uLi9jbWRzL2NvbW1vbi91dGlsJztcblxuaW1wb3J0IHtcbiAgaXNHbG9iYWxJZGVudGlmaWVyLFxuICBpc05hbWVkSWRlbnRpZmllcixcbiAgdW53cmFwTWVzc2FnZVBhcnRzRnJvbUxvY2FsaXplQ2FsbCxcbiAgdW53cmFwU3Vic3RpdHV0aW9uc0Zyb21Mb2NhbGl6ZUNhbGxcbn0gZnJvbSAnLi4vc291cmNlX2ZpbGVfdXRpbHMnO1xuaW1wb3J0IHsgRGlhZ25vc3RpY3MgfSBmcm9tICcuLi8uLi9jb21tb24vZGlhZ25vc3RpY3MnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUVzNUV4dHJhY3RQbHVnaW4oXG4gIG1lc3NhZ2VzOiAoybVQYXJzZWRNZXNzYWdlIHwgUGFyc2VkTWVzc2FnZUxlZ2FjeSlbXSxcbiAgZGlhZ25vc3RpY3M6IERpYWdub3N0aWNzLFxuICBsb2NhbGl6ZU5hbWUgPSAnJGxvY2FsaXplJ1xuKTogUGx1Z2luT2JqIHtcbiAgcmV0dXJuIHtcbiAgICB2aXNpdG9yOiB7XG4gICAgICBDYWxsRXhwcmVzc2lvbihjYWxsUGF0aDogTm9kZVBhdGg8Q2FsbEV4cHJlc3Npb24+KSB7XG4gICAgICAgIGNvbnN0IGNhbGxlZVBhdGggPSBjYWxsUGF0aC5nZXQoJ2NhbGxlZScpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNOYW1lZElkZW50aWZpZXIoY2FsbGVlUGF0aCwgbG9jYWxpemVOYW1lKSAmJlxuICAgICAgICAgIGlzR2xvYmFsSWRlbnRpZmllcihjYWxsZWVQYXRoKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlUGFydHMgPSB1bndyYXBNZXNzYWdlUGFydHNGcm9tTG9jYWxpemVDYWxsKGNhbGxQYXRoKTtcbiAgICAgICAgICBjb25zdCBleHByZXNzaW9ucyA9IHVud3JhcFN1YnN0aXR1dGlvbnNGcm9tTG9jYWxpemVDYWxsKFxuICAgICAgICAgICAgY2FsbFBhdGgubm9kZVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZTogybVQYXJzZWRNZXNzYWdlIHwgUGFyc2VkTWVzc2FnZUxlZ2FjeSA9IMm1cGFyc2VNZXNzYWdlKFxuICAgICAgICAgICAgbWVzc2FnZVBhcnRzLFxuICAgICAgICAgICAgZXhwcmVzc2lvbnNcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFtZXNzYWdlcy5maW5kKChtc2c6IGFueSkgPT5cbiAgICAgICAgICAgICAgbWVzc2FnZS5pZFxuICAgICAgICAgICAgICAgID8gbXNnLmlkID09PSBtZXNzYWdlLmlkXG4gICAgICAgICAgICAgICAgOiBtc2cubWVzc2FnZUlkID09PVxuICAgICAgICAgICAgICAgICAgKCg8dW5rbm93bj5tZXNzYWdlKSBhcyBQYXJzZWRNZXNzYWdlTGVnYWN5KS5tZXNzYWdlSWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIl19