/**
 * @fileoverview added by tsickle
 * Generated from: cmds/extract/extractor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { transformSync } from '@babel/core';
import { makeEs2015ExtractPlugin } from './source_files/es2015_extract_plugin';
import { makeEs5ExtractPlugin } from './source_files/es5_extract_plugin';
/**
 * A class that extracts parsed messages from file contents, by parsing the contents as JavaScript
 * and looking for occurrences of `$localize` in the source code.
 */
var /**
 * A class that extracts parsed messages from file contents, by parsing the contents as JavaScript
 * and looking for occurrences of `$localize` in the source code.
 */
Extractor = /** @class */ (function () {
    function Extractor(diagnostics) {
        this.diagnostics = diagnostics;
        this.messages = [];
    }
    /**
     * @param {?} sourceCode
     * @return {?}
     */
    Extractor.prototype.extractMessages = /**
     * @param {?} sourceCode
     * @return {?}
     */
    function (sourceCode) {
        if (sourceCode.includes('$localize')) {
            // Only bother to parse the file if it contains a reference to `$localize`.
            transformSync(sourceCode, {
                plugins: [
                    makeEs2015ExtractPlugin(this.messages, this.diagnostics),
                    makeEs5ExtractPlugin(this.messages, this.diagnostics)
                ],
                code: false,
                ast: false
            });
        }
    };
    return Extractor;
}());
/**
 * A class that extracts parsed messages from file contents, by parsing the contents as JavaScript
 * and looking for occurrences of `$localize` in the source code.
 */
export { Extractor };
if (false) {
    /** @type {?} */
    Extractor.prototype.messages;
    /**
     * @type {?}
     * @private
     */
    Extractor.prototype.diagnostics;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxvY2wvY2xpLyIsInNvdXJjZXMiOlsiY21kcy9leHRyYWN0L2V4dHJhY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQVFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFNUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDL0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7O0FBT3pFOzs7OztJQUdFLG1CQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUY1QyxhQUFRLEdBQXFCLEVBQUUsQ0FBQztJQUVlLENBQUM7Ozs7O0lBRWhELG1DQUFlOzs7O0lBQWYsVUFBZ0IsVUFBa0I7UUFDaEMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3BDLDJFQUEyRTtZQUMzRSxhQUFhLENBQUMsVUFBVSxFQUFFO2dCQUN4QixPQUFPLEVBQUU7b0JBQ1AsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDO29CQUN4RCxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUM7aUJBQ3REO2dCQUNELElBQUksRUFBRSxLQUFLO2dCQUNYLEdBQUcsRUFBRSxLQUFLO2FBQ1gsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBbEJELElBa0JDOzs7Ozs7OztJQWpCQyw2QkFBZ0M7Ozs7O0lBRXBCLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxyXG4gKi9cclxuaW1wb3J0IHsgybVQYXJzZWRNZXNzYWdlIH0gZnJvbSAnQGFuZ3VsYXIvbG9jYWxpemUnO1xyXG5pbXBvcnQgeyB0cmFuc2Zvcm1TeW5jIH0gZnJvbSAnQGJhYmVsL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgbWFrZUVzMjAxNUV4dHJhY3RQbHVnaW4gfSBmcm9tICcuL3NvdXJjZV9maWxlcy9lczIwMTVfZXh0cmFjdF9wbHVnaW4nO1xyXG5pbXBvcnQgeyBtYWtlRXM1RXh0cmFjdFBsdWdpbiB9IGZyb20gJy4vc291cmNlX2ZpbGVzL2VzNV9leHRyYWN0X3BsdWdpbic7XHJcbmltcG9ydCB7IERpYWdub3N0aWNzIH0gZnJvbSAnLi4vY29tbW9uL2RpYWdub3N0aWNzJztcclxuXHJcbi8qKlxyXG4gKiBBIGNsYXNzIHRoYXQgZXh0cmFjdHMgcGFyc2VkIG1lc3NhZ2VzIGZyb20gZmlsZSBjb250ZW50cywgYnkgcGFyc2luZyB0aGUgY29udGVudHMgYXMgSmF2YVNjcmlwdFxyXG4gKiBhbmQgbG9va2luZyBmb3Igb2NjdXJyZW5jZXMgb2YgYCRsb2NhbGl6ZWAgaW4gdGhlIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4dHJhY3RvciB7XHJcbiAgbWVzc2FnZXM6IMm1UGFyc2VkTWVzc2FnZVtdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhZ25vc3RpY3M6IERpYWdub3N0aWNzKSB7fVxyXG5cclxuICBleHRyYWN0TWVzc2FnZXMoc291cmNlQ29kZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAoc291cmNlQ29kZS5pbmNsdWRlcygnJGxvY2FsaXplJykpIHtcclxuICAgICAgLy8gT25seSBib3RoZXIgdG8gcGFyc2UgdGhlIGZpbGUgaWYgaXQgY29udGFpbnMgYSByZWZlcmVuY2UgdG8gYCRsb2NhbGl6ZWAuXHJcbiAgICAgIHRyYW5zZm9ybVN5bmMoc291cmNlQ29kZSwge1xyXG4gICAgICAgIHBsdWdpbnM6IFtcclxuICAgICAgICAgIG1ha2VFczIwMTVFeHRyYWN0UGx1Z2luKHRoaXMubWVzc2FnZXMsIHRoaXMuZGlhZ25vc3RpY3MpLFxyXG4gICAgICAgICAgbWFrZUVzNUV4dHJhY3RQbHVnaW4odGhpcy5tZXNzYWdlcywgdGhpcy5kaWFnbm9zdGljcylcclxuICAgICAgICBdLFxyXG4gICAgICAgIGNvZGU6IGZhbHNlLFxyXG4gICAgICAgIGFzdDogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==