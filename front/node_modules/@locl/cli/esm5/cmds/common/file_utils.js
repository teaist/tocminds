/**
 * @fileoverview added by tsickle
 * Generated from: cmds/common/file_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as fs from 'fs';
import * as path from 'path';
var FileUtils = /** @class */ (function () {
    function FileUtils() {
    }
    /**
     * @param {?} absolutePath
     * @return {?}
     */
    FileUtils.readFile = /**
     * @param {?} absolutePath
     * @return {?}
     */
    function (absolutePath) {
        return fs.readFileSync(absolutePath, 'utf8');
    };
    /**
     * @param {?} absolutePath
     * @return {?}
     */
    FileUtils.readFileBuffer = /**
     * @param {?} absolutePath
     * @return {?}
     */
    function (absolutePath) {
        return fs.readFileSync(absolutePath);
    };
    /**
     * @param {?} absolutePath
     * @param {?} contents
     * @return {?}
     */
    FileUtils.writeFile = /**
     * @param {?} absolutePath
     * @param {?} contents
     * @return {?}
     */
    function (absolutePath, contents) {
        FileUtils.ensureDir(path.dirname(absolutePath));
        fs.writeFileSync(absolutePath, contents);
    };
    /**
     * @param {?} absolutePath
     * @return {?}
     */
    FileUtils.ensureDir = /**
     * @param {?} absolutePath
     * @return {?}
     */
    function (absolutePath) {
        /** @type {?} */
        var parents = [];
        while (!FileUtils.isRoot(absolutePath) && !fs.existsSync(absolutePath)) {
            parents.push(absolutePath);
            absolutePath = path.dirname(absolutePath);
        }
        while (parents.length) {
            fs.mkdirSync((/** @type {?} */ (parents.pop())));
        }
    };
    /**
     * @param {?} p
     * @return {?}
     */
    FileUtils.remove = /**
     * @param {?} p
     * @return {?}
     */
    function (p) {
        /** @type {?} */
        var stat = fs.statSync(p);
        if (stat.isFile()) {
            fs.unlinkSync(p);
        }
        else if (stat.isDirectory()) {
            fs.readdirSync(p).forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                /** @type {?} */
                var absChild = path.resolve(p, child);
                FileUtils.remove(absChild);
            }));
            fs.rmdirSync(p);
        }
    };
    /**
     * @param {?} absolutePath
     * @return {?}
     */
    FileUtils.isRoot = /**
     * @param {?} absolutePath
     * @return {?}
     */
    function (absolutePath) {
        return path.dirname(absolutePath) === absolutePath;
    };
    /**
     * @param {?} files
     * @param {?} pattern
     * @param {?=} replaceValue
     * @return {?}
     */
    FileUtils.dedup = /**
     * @param {?} files
     * @param {?} pattern
     * @param {?=} replaceValue
     * @return {?}
     */
    function (files, pattern, replaceValue) {
        if (replaceValue === void 0) { replaceValue = ''; }
        /** @type {?} */
        var filesSet = files.map((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.replace(pattern, replaceValue); }));
        /** @type {?} */
        var dedup = [];
        /** @type {?} */
        var indexes = [];
        filesSet.forEach((/**
         * @param {?} file
         * @param {?} index
         * @return {?}
         */
        function (file, index) {
            if (dedup.indexOf(file) === -1) {
                dedup.push(file);
                indexes.push(index);
            }
        }));
        return indexes.map((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return files[index]; }));
    };
    return FileUtils;
}());
export { FileUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZV91dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bsb2NsL2NsaS8iLCJzb3VyY2VzIjpbImNtZHMvY29tbW9uL2ZpbGVfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFFN0I7SUFBQTtJQXNEQSxDQUFDOzs7OztJQXJEUSxrQkFBUTs7OztJQUFmLFVBQWdCLFlBQW9CO1FBQ2xDLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7Ozs7SUFFTSx3QkFBYzs7OztJQUFyQixVQUFzQixZQUFvQjtRQUN4QyxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7O0lBRU0sbUJBQVM7Ozs7O0lBQWhCLFVBQWlCLFlBQW9CLEVBQUUsUUFBeUI7UUFDOUQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDaEQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFTSxtQkFBUzs7OztJQUFoQixVQUFpQixZQUFvQjs7WUFDN0IsT0FBTyxHQUFhLEVBQUU7UUFDNUIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3RFLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDM0IsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDckIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxtQkFBQSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUMsQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxnQkFBTTs7OztJQUFiLFVBQWMsQ0FBUzs7WUFDZixJQUFJLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDakIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsQjthQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQzdCLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsS0FBSzs7b0JBQ3ZCLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7Z0JBQ3ZDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0IsQ0FBQyxFQUFDLENBQUM7WUFDSCxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxnQkFBTTs7OztJQUFiLFVBQWMsWUFBb0I7UUFDaEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLFlBQVksQ0FBQztJQUNyRCxDQUFDOzs7Ozs7O0lBRU0sZUFBSzs7Ozs7O0lBQVosVUFBYSxLQUFlLEVBQUUsT0FBZSxFQUFFLFlBQWlCO1FBQWpCLDZCQUFBLEVBQUEsaUJBQWlCOztZQUN4RCxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxFQUFuQyxDQUFtQyxFQUFDOztZQUNqRSxLQUFLLEdBQUcsRUFBRTs7WUFDVixPQUFPLEdBQUcsRUFBRTtRQUNsQixRQUFRLENBQUMsT0FBTzs7Ozs7UUFBQyxVQUFDLElBQVksRUFBRSxLQUFhO1lBQzNDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNyQjtRQUNILENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUMsR0FBRzs7OztRQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFaLENBQVksRUFBQyxDQUFDO0lBQzVDLENBQUM7SUFDSCxnQkFBQztBQUFELENBQUMsQUF0REQsSUFzREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY2xhc3MgRmlsZVV0aWxzIHtcbiAgc3RhdGljIHJlYWRGaWxlKGFic29sdXRlUGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGFic29sdXRlUGF0aCwgJ3V0ZjgnKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkRmlsZUJ1ZmZlcihhYnNvbHV0ZVBhdGg6IHN0cmluZyk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhhYnNvbHV0ZVBhdGgpO1xuICB9XG5cbiAgc3RhdGljIHdyaXRlRmlsZShhYnNvbHV0ZVBhdGg6IHN0cmluZywgY29udGVudHM6IHN0cmluZyB8IEJ1ZmZlcikge1xuICAgIEZpbGVVdGlscy5lbnN1cmVEaXIocGF0aC5kaXJuYW1lKGFic29sdXRlUGF0aCkpO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoYWJzb2x1dGVQYXRoLCBjb250ZW50cyk7XG4gIH1cblxuICBzdGF0aWMgZW5zdXJlRGlyKGFic29sdXRlUGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgcGFyZW50czogc3RyaW5nW10gPSBbXTtcbiAgICB3aGlsZSAoIUZpbGVVdGlscy5pc1Jvb3QoYWJzb2x1dGVQYXRoKSAmJiAhZnMuZXhpc3RzU3luYyhhYnNvbHV0ZVBhdGgpKSB7XG4gICAgICBwYXJlbnRzLnB1c2goYWJzb2x1dGVQYXRoKTtcbiAgICAgIGFic29sdXRlUGF0aCA9IHBhdGguZGlybmFtZShhYnNvbHV0ZVBhdGgpO1xuICAgIH1cbiAgICB3aGlsZSAocGFyZW50cy5sZW5ndGgpIHtcbiAgICAgIGZzLm1rZGlyU3luYyhwYXJlbnRzLnBvcCgpISk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHJlbW92ZShwOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMocCk7XG4gICAgaWYgKHN0YXQuaXNGaWxlKCkpIHtcbiAgICAgIGZzLnVubGlua1N5bmMocCk7XG4gICAgfSBlbHNlIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgIGZzLnJlYWRkaXJTeW5jKHApLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICBjb25zdCBhYnNDaGlsZCA9IHBhdGgucmVzb2x2ZShwLCBjaGlsZCk7XG4gICAgICAgIEZpbGVVdGlscy5yZW1vdmUoYWJzQ2hpbGQpO1xuICAgICAgfSk7XG4gICAgICBmcy5ybWRpclN5bmMocCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGlzUm9vdChhYnNvbHV0ZVBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwYXRoLmRpcm5hbWUoYWJzb2x1dGVQYXRoKSA9PT0gYWJzb2x1dGVQYXRoO1xuICB9XG5cbiAgc3RhdGljIGRlZHVwKGZpbGVzOiBzdHJpbmdbXSwgcGF0dGVybjogUmVnRXhwLCByZXBsYWNlVmFsdWUgPSAnJyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBmaWxlc1NldCA9IGZpbGVzLm1hcChmaWxlID0+IGZpbGUucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlVmFsdWUpKTtcbiAgICBjb25zdCBkZWR1cCA9IFtdO1xuICAgIGNvbnN0IGluZGV4ZXMgPSBbXTtcbiAgICBmaWxlc1NldC5mb3JFYWNoKChmaWxlOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChkZWR1cC5pbmRleE9mKGZpbGUpID09PSAtMSkge1xuICAgICAgICBkZWR1cC5wdXNoKGZpbGUpO1xuICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBpbmRleGVzLm1hcChpbmRleCA9PiBmaWxlc1tpbmRleF0pO1xuICB9XG59XG4iXX0=