/**
 * @fileoverview added by tsickle
 * Generated from: cmds/common/diagnostics.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as chalk from 'chalk';
/**
 * This class is used to collect and then report warnings and errors that occur during the execution
 * of the tools.
 */
var /**
 * This class is used to collect and then report warnings and errors that occur during the execution
 * of the tools.
 */
Diagnostics = /** @class */ (function () {
    function Diagnostics() {
        this.messages = [];
    }
    Object.defineProperty(Diagnostics.prototype, "hasErrors", {
        get: /**
         * @return {?}
         */
        function () {
            return this.messages.some((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m.type === 'error'; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} message
     * @return {?}
     */
    Diagnostics.prototype.log = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        this.messages.push({ type: '', message: message });
    };
    /**
     * @param {?} message
     * @return {?}
     */
    Diagnostics.prototype.warn = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        this.messages.push({ type: 'warning', message: message });
    };
    /**
     * @param {?} message
     * @return {?}
     */
    Diagnostics.prototype.error = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        this.messages.push({ type: 'error', message: message });
    };
    /**
     * @param {?} message
     * @return {?}
     */
    Diagnostics.prototype.formatDiagnostics = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        /** @type {?} */
        var errors = (/** @type {?} */ (this.messages)).filter((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.type === 'error'; })).map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return ' - ' + d.message; }));
        /** @type {?} */
        var warnings = (/** @type {?} */ (this.messages)).filter((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.type === 'warning'; })).map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return ' - ' + d.message; }));
        if (errors.length) {
            message += '\nERRORS:\n' + errors.join('\n');
        }
        if (warnings.length) {
            message += '\nWARNINGS:\n' + warnings.join('\n');
        }
        return message;
    };
    /**
     * @return {?}
     */
    Diagnostics.prototype.logMessages = /**
     * @return {?}
     */
    function () {
        while (this.messages.length) {
            /** @type {?} */
            var m = this.messages.shift();
            switch (m.type) {
                case 'warning':
                    console.warn(chalk.yellow("Warning: " + m.message));
                    break;
                case 'error':
                    console.error(chalk.red("Error: " + m.message));
                    break;
                default:
                    console.log(chalk.blue("" + m.message));
            }
        }
    };
    return Diagnostics;
}());
/**
 * This class is used to collect and then report warnings and errors that occur during the execution
 * of the tools.
 */
export { Diagnostics };
if (false) {
    /** @type {?} */
    Diagnostics.prototype.messages;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc3RpY3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG9jbC9jbGkvIiwic291cmNlcyI6WyJjbWRzL2NvbW1vbi9kaWFnbm9zdGljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDOzs7OztBQU0vQjs7Ozs7SUFBQTtRQUNXLGFBQVEsR0FBRyxFQUFFLENBQUM7SUFpRHpCLENBQUM7SUEvQ0Msc0JBQUksa0NBQVM7Ozs7UUFBYjtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBbEIsQ0FBa0IsRUFBQyxDQUFDO1FBQ3JELENBQUM7OztPQUFBOzs7OztJQUVELHlCQUFHOzs7O0lBQUgsVUFBSSxPQUFlO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7Ozs7SUFFRCwwQkFBSTs7OztJQUFKLFVBQUssT0FBZTtRQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBRUQsMkJBQUs7Ozs7SUFBTCxVQUFNLE9BQWU7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7OztJQUVELHVDQUFpQjs7OztJQUFqQixVQUFrQixPQUFlOztZQUN6QixNQUFNLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFsQixDQUFrQixFQUFDLENBQUMsR0FBRzs7OztRQUMvRCxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFqQixDQUFpQixFQUN2Qjs7WUFDSyxRQUFRLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFwQixDQUFvQixFQUFDLENBQUMsR0FBRzs7OztRQUNuRSxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFqQixDQUFpQixFQUN2QjtRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNqQixPQUFPLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUM7UUFDRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbkIsT0FBTyxJQUFJLGVBQWUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELGlDQUFXOzs7SUFBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7O2dCQUNyQixDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDL0IsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUNkLEtBQUssU0FBUztvQkFDWixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsY0FBWSxDQUFDLENBQUMsT0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDcEQsTUFBTTtnQkFDUixLQUFLLE9BQU87b0JBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVUsQ0FBQyxDQUFDLE9BQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ2hELE1BQU07Z0JBQ1I7b0JBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUcsQ0FBQyxDQUFDLE9BQVMsQ0FBQyxDQUFDLENBQUM7YUFDM0M7U0FDRjtJQUNILENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUFsREQsSUFrREM7Ozs7Ozs7O0lBakRDLCtCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoYWxrIGZyb20gJ2NoYWxrJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIHVzZWQgdG8gY29sbGVjdCBhbmQgdGhlbiByZXBvcnQgd2FybmluZ3MgYW5kIGVycm9ycyB0aGF0IG9jY3VyIGR1cmluZyB0aGUgZXhlY3V0aW9uXG4gKiBvZiB0aGUgdG9vbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBEaWFnbm9zdGljcyB7XG4gIHJlYWRvbmx5IG1lc3NhZ2VzID0gW107XG5cbiAgZ2V0IGhhc0Vycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5zb21lKG0gPT4gbS50eXBlID09PSAnZXJyb3InKTtcbiAgfVxuXG4gIGxvZyhtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2goeyB0eXBlOiAnJywgbWVzc2FnZSB9KTtcbiAgfVxuXG4gIHdhcm4obWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKHsgdHlwZTogJ3dhcm5pbmcnLCBtZXNzYWdlIH0pO1xuICB9XG5cbiAgZXJyb3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKHsgdHlwZTogJ2Vycm9yJywgbWVzc2FnZSB9KTtcbiAgfVxuXG4gIGZvcm1hdERpYWdub3N0aWNzKG1lc3NhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZXJyb3JzID0gdGhpcy5tZXNzYWdlcyEuZmlsdGVyKGQgPT4gZC50eXBlID09PSAnZXJyb3InKS5tYXAoXG4gICAgICBkID0+ICcgLSAnICsgZC5tZXNzYWdlXG4gICAgKTtcbiAgICBjb25zdCB3YXJuaW5ncyA9IHRoaXMubWVzc2FnZXMhLmZpbHRlcihkID0+IGQudHlwZSA9PT0gJ3dhcm5pbmcnKS5tYXAoXG4gICAgICBkID0+ICcgLSAnICsgZC5tZXNzYWdlXG4gICAgKTtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgbWVzc2FnZSArPSAnXFxuRVJST1JTOlxcbicgKyBlcnJvcnMuam9pbignXFxuJyk7XG4gICAgfVxuICAgIGlmICh3YXJuaW5ncy5sZW5ndGgpIHtcbiAgICAgIG1lc3NhZ2UgKz0gJ1xcbldBUk5JTkdTOlxcbicgKyB3YXJuaW5ncy5qb2luKCdcXG4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxuICBsb2dNZXNzYWdlcygpIHtcbiAgICB3aGlsZSAodGhpcy5tZXNzYWdlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG0gPSB0aGlzLm1lc3NhZ2VzLnNoaWZ0KCk7XG4gICAgICBzd2l0Y2ggKG0udHlwZSkge1xuICAgICAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgICAgICBjb25zb2xlLndhcm4oY2hhbGsueWVsbG93KGBXYXJuaW5nOiAke20ubWVzc2FnZX1gKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZChgRXJyb3I6ICR7bS5tZXNzYWdlfWApKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5ibHVlKGAke20ubWVzc2FnZX1gKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=