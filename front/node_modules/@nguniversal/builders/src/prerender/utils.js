/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/prerender/utils", ["require", "exports", "@angular-devkit/architect", "fs", "guess-parser", "os", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const architect_1 = require("@angular-devkit/architect");
    const fs = require("fs");
    const guess_parser_1 = require("guess-parser");
    const os = require("os");
    const path = require("path");
    /**
     * Returns the union of routes, the contents of routesFile if given,
     * and the static routes extracted if guessRoutes is set to true.
     */
    function getRoutes(options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            let routes = options.routes || [];
            if (options.routesFile) {
                const routesFilePath = path.resolve(context.workspaceRoot, options.routesFile);
                routes = routes.concat(fs.readFileSync(routesFilePath, 'utf8')
                    .split(/\r?\n/)
                    .filter(v => !!v));
            }
            if (options.guessRoutes) {
                const browserTarget = architect_1.targetFromTargetString(options.browserTarget);
                const { tsConfig } = yield context.getTargetOptions(browserTarget);
                if (typeof tsConfig === 'string') {
                    try {
                        routes = routes.concat(guess_parser_1.parseAngularRoutes(path.join(context.workspaceRoot, tsConfig))
                            .map(routeObj => routeObj.path)
                            .filter(route => !route.includes('*') && !route.includes(':')));
                    }
                    catch (e) {
                        context.logger.error('Unable to extract routes from application.', e);
                    }
                }
            }
            return [...new Set(routes)];
        });
    }
    exports.getRoutes = getRoutes;
    /**
     * Evenly shards items in an array.
     * e.g. shardArray([1, 2, 3, 4], 2) => [[1, 2], [3, 4]]
     */
    function shardArray(items, maxNoOfShards = (os.cpus().length - 1) || 1) {
        const shardedArray = [];
        const numShards = Math.min(maxNoOfShards, items.length);
        for (let i = 0; i < numShards; i++) {
            shardedArray.push(items.filter((_, index) => index % numShards === i));
        }
        return shardedArray;
    }
    exports.shardArray = shardArray;
    /**
     * Returns the name of the index file outputted by the browser builder.
     */
    function getIndexOutputFile(options) {
        if (typeof options.index === 'string') {
            return path.basename(options.index);
        }
        else {
            return options.index.output || 'index.html';
        }
    }
    exports.getIndexOutputFile = getIndexOutputFile;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9wcmVyZW5kZXIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCx5REFBbUY7SUFFbkYseUJBQXlCO0lBQ3pCLCtDQUFrRDtJQUNsRCx5QkFBeUI7SUFDekIsNkJBQTZCO0lBSTdCOzs7T0FHRztJQUNILFNBQXNCLFNBQVMsQ0FDN0IsT0FBZ0MsRUFDaEMsT0FBdUI7O1lBRXZCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1lBRWxDLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDdEIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDL0UsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQ3BCLEVBQUUsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztxQkFDcEMsS0FBSyxDQUFDLE9BQU8sQ0FBQztxQkFDZCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3BCLENBQUM7YUFDSDtZQUVELElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtnQkFDdkIsTUFBTSxhQUFhLEdBQUcsa0NBQXNCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUNwRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ25FLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO29CQUNoQyxJQUFJO3dCQUNGLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUNwQixpQ0FBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7NkJBQzNELEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7NkJBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDakUsQ0FBQztxQkFDSDtvQkFBQyxPQUFPLENBQUMsRUFBRTt3QkFDVixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDdkU7aUJBQ0Y7YUFDRjtZQUVELE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQztLQUFBO0lBaENELDhCQWdDQztJQUVEOzs7T0FHRztJQUNILFNBQWdCLFVBQVUsQ0FBSSxLQUFVLEVBQUUsYUFBYSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25GLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN4QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxZQUFZLENBQUMsSUFBSSxDQUNmLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEdBQUcsU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUNwRCxDQUFDO1NBQ0g7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBVkQsZ0NBVUM7SUFFRDs7T0FFRztJQUNILFNBQWdCLGtCQUFrQixDQUFDLE9BQThCO1FBQy9ELElBQUksT0FBTyxPQUFPLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUNyQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JDO2FBQU07WUFDTCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLFlBQVksQ0FBQztTQUM3QztJQUNILENBQUM7SUFORCxnREFNQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBCdWlsZGVyQ29udGV4dCwgdGFyZ2V0RnJvbVRhcmdldFN0cmluZyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9hcmNoaXRlY3QnO1xuaW1wb3J0IHsgQnJvd3NlckJ1aWxkZXJPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXInO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgcGFyc2VBbmd1bGFyUm91dGVzIH0gZnJvbSAnZ3Vlc3MtcGFyc2VyJztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IFByZXJlbmRlckJ1aWxkZXJPcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHVuaW9uIG9mIHJvdXRlcywgdGhlIGNvbnRlbnRzIG9mIHJvdXRlc0ZpbGUgaWYgZ2l2ZW4sXG4gKiBhbmQgdGhlIHN0YXRpYyByb3V0ZXMgZXh0cmFjdGVkIGlmIGd1ZXNzUm91dGVzIGlzIHNldCB0byB0cnVlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Um91dGVzKFxuICBvcHRpb25zOiBQcmVyZW5kZXJCdWlsZGVyT3B0aW9ucyxcbiAgY29udGV4dDogQnVpbGRlckNvbnRleHQsXG4pOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIGxldCByb3V0ZXMgPSBvcHRpb25zLnJvdXRlcyB8fCBbXTtcblxuICBpZiAob3B0aW9ucy5yb3V0ZXNGaWxlKSB7XG4gICAgY29uc3Qgcm91dGVzRmlsZVBhdGggPSBwYXRoLnJlc29sdmUoY29udGV4dC53b3Jrc3BhY2VSb290LCBvcHRpb25zLnJvdXRlc0ZpbGUpO1xuICAgIHJvdXRlcyA9IHJvdXRlcy5jb25jYXQoXG4gICAgICBmcy5yZWFkRmlsZVN5bmMocm91dGVzRmlsZVBhdGgsICd1dGY4JylcbiAgICAgICAgLnNwbGl0KC9cXHI/XFxuLylcbiAgICAgICAgLmZpbHRlcih2ID0+ICEhdilcbiAgICApO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZ3Vlc3NSb3V0ZXMpIHtcbiAgICBjb25zdCBicm93c2VyVGFyZ2V0ID0gdGFyZ2V0RnJvbVRhcmdldFN0cmluZyhvcHRpb25zLmJyb3dzZXJUYXJnZXQpO1xuICAgIGNvbnN0IHsgdHNDb25maWcgfSA9IGF3YWl0IGNvbnRleHQuZ2V0VGFyZ2V0T3B0aW9ucyhicm93c2VyVGFyZ2V0KTtcbiAgICBpZiAodHlwZW9mIHRzQ29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcm91dGVzID0gcm91dGVzLmNvbmNhdChcbiAgICAgICAgICBwYXJzZUFuZ3VsYXJSb3V0ZXMocGF0aC5qb2luKGNvbnRleHQud29ya3NwYWNlUm9vdCwgdHNDb25maWcpKVxuICAgICAgICAgICAgLm1hcChyb3V0ZU9iaiA9PiByb3V0ZU9iai5wYXRoKVxuICAgICAgICAgICAgLmZpbHRlcihyb3V0ZSA9PiAhcm91dGUuaW5jbHVkZXMoJyonKSAmJiAhcm91dGUuaW5jbHVkZXMoJzonKSlcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29udGV4dC5sb2dnZXIuZXJyb3IoJ1VuYWJsZSB0byBleHRyYWN0IHJvdXRlcyBmcm9tIGFwcGxpY2F0aW9uLicsIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbLi4ubmV3IFNldChyb3V0ZXMpXTtcbn1cblxuLyoqXG4gKiBFdmVubHkgc2hhcmRzIGl0ZW1zIGluIGFuIGFycmF5LlxuICogZS5nLiBzaGFyZEFycmF5KFsxLCAyLCAzLCA0XSwgMikgPT4gW1sxLCAyXSwgWzMsIDRdXVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhcmRBcnJheTxUPihpdGVtczogVFtdLCBtYXhOb09mU2hhcmRzID0gKG9zLmNwdXMoKS5sZW5ndGggLSAxKSB8fCAxKTogVFtdW10ge1xuICBjb25zdCBzaGFyZGVkQXJyYXkgPSBbXTtcbiAgY29uc3QgbnVtU2hhcmRzID0gTWF0aC5taW4obWF4Tm9PZlNoYXJkcywgaXRlbXMubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TaGFyZHM7IGkrKykge1xuICAgIHNoYXJkZWRBcnJheS5wdXNoKFxuICAgICAgaXRlbXMuZmlsdGVyKChfLCBpbmRleCkgPT4gaW5kZXggJSBudW1TaGFyZHMgPT09IGkpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBzaGFyZGVkQXJyYXk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgaW5kZXggZmlsZSBvdXRwdXR0ZWQgYnkgdGhlIGJyb3dzZXIgYnVpbGRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEluZGV4T3V0cHV0RmlsZShvcHRpb25zOiBCcm93c2VyQnVpbGRlck9wdGlvbnMpOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdGguYmFzZW5hbWUob3B0aW9ucy5pbmRleCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuaW5kZXgub3V0cHV0IHx8ICdpbmRleC5odG1sJztcbiAgfVxufVxuIl19