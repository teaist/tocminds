{"version":3,"file":"socket-engine.js","sources":["../../../../../../modules/common/engine/src/interfaces.ts","../../../../../../modules/common/engine/src/file-loader.ts","../../../../../../modules/common/engine/src/engine.ts","../../../../../../modules/socket-engine/src/main.ts","../../../../../../modules/socket-engine/socket-engine.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory, StaticProvider, Type } from '@angular/core';\n\n/** These are the allowed options for the render */\nexport interface RenderOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n  url?: string;\n  document?: string;\n  documentFilePath?: string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ResourceLoader } from '@angular/compiler';\nimport * as fs from 'fs';\n\n/** ResourceLoader implementation for loading files */\nexport class FileLoader implements ResourceLoader {\n  get(url: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(url, (err: NodeJS.ErrnoException | null, data: Buffer) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(data.toString());\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ResourceLoader } from '@angular/compiler';\nimport { Compiler, CompilerFactory, NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { INITIAL_CONFIG, platformDynamicServer, renderModuleFactory } from '@angular/platform-server';\nimport * as fs from 'fs';\n\nimport { FileLoader } from './file-loader';\nimport { RenderOptions } from './interfaces';\n\n/**\n * A common rendering engine utility. This abstracts the logic\n * for handling the platformServer compiler, the module cache, and\n * the document loader\n */\nexport class CommonEngine {\n\n  /** Return an instance of the platformServer compiler */\n  getCompiler(): Compiler {\n    const compilerFactory: CompilerFactory = platformDynamicServer().injector.get(CompilerFactory);\n\n    return compilerFactory.createCompiler([\n      {providers: [{provide: ResourceLoader, useClass: FileLoader, deps: []}]}\n    ]);\n  }\n\n  private factoryCacheMap = new Map<Type<{}>, NgModuleFactory<{}>>();\n  private templateCache: {[key: string]: string} = {};\n\n  constructor(private moduleOrFactory?: Type<{}> | NgModuleFactory<{}>,\n              private providers: StaticProvider[] = []) {}\n\n  /**\n   * Render an HTML document for a specific URL with specified\n   * render options\n   */\n  async render(opts: RenderOptions): Promise<string> {\n    // if opts.document dosen't exist then opts.documentFilePath must\n    const doc = opts.document || await this.getDocument(opts.documentFilePath as string);\n    const extraProviders = [\n      ...(opts.providers || []),\n      ...(this.providers || []),\n      {\n        provide: INITIAL_CONFIG,\n        useValue: {\n          document: doc,\n          url: opts.url\n        }\n      }\n    ];\n\n    const moduleOrFactory = this.moduleOrFactory || opts.bootstrap;\n    const factory = await this.getFactory(moduleOrFactory);\n\n    return renderModuleFactory(factory, {extraProviders});\n  }\n\n  /** Return the factory for a given engine instance */\n  async getFactory(moduleOrFactory: Type<{}> | NgModuleFactory<{}>): Promise<NgModuleFactory<{}>> {\n    // If module has been compiled AoT\n    if (moduleOrFactory instanceof NgModuleFactory) {\n      return moduleOrFactory;\n    } else {\n      // we're in JIT mode\n      const moduleFactory = this.factoryCacheMap.get(moduleOrFactory);\n\n      // If module factory is cached\n      if (moduleFactory) {\n        return moduleFactory;\n      }\n\n      // Compile the module and cache it\n      const factory = await this.getCompiler().compileModuleAsync(moduleOrFactory);\n      this.factoryCacheMap.set(moduleOrFactory, factory);\n\n      return factory;\n    }\n  }\n\n  /** Retrieve the document from the cache or the filesystem */\n  private getDocument(filePath: string): Promise<string> {\n    const doc = this.templateCache[filePath] = this.templateCache[filePath] ||\n    fs.readFileSync(filePath).toString();\n\n    // As  promise so we can change the API later without breaking\n    return Promise.resolve(doc);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { ɵCommonEngine as CommonEngine,\n  ɵRenderOptions as RenderOptions } from '@nguniversal/common/engine';\nimport * as net from 'net';\n\nexport interface SocketEngineServer {\n  close: () => void;\n}\n\nexport interface SocketEngineRenderOptions extends RenderOptions {\n  id: number;\n}\n\nexport interface SocketEngineResponse {\n  id: number;\n  html: string|null;\n  error?: Error;\n}\n\nexport function startSocketEngine(\n  moduleOrFactory: Type<{}> | NgModuleFactory<{}>,\n  providers: StaticProvider[] = [],\n  host = 'localhost',\n  port = 9090\n): Promise<SocketEngineServer> {\n  return new Promise((resolve, _reject) => {\n    const engine = new CommonEngine(moduleOrFactory, providers);\n\n    const server = net.createServer(socket => {\n      socket.on('data', async buff => {\n        const message = buff.toString();\n        const renderOptions = JSON.parse(message) as SocketEngineRenderOptions;\n        try {\n          const html = await engine.render(renderOptions);\n          socket.write(JSON.stringify({html, id: renderOptions.id} as SocketEngineResponse));\n        } catch (error) {\n          // send the error down to the client then rethrow it\n          socket.write(JSON.stringify({\n            html: null,\n            id: renderOptions.id,\n            error: error.toString(),\n          } as SocketEngineResponse));\n        }\n      });\n    });\n\n    server.listen(port, host);\n    resolve({close: () => server.close()});\n  });\n}\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["fs.readFile","fs.readFileSync","net.createServer"],"mappings":"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"}